// Code generated by go-queryset. DO NOT EDIT.
package models

import (
	"errors"
	"fmt"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set RepoQuerySet

// RepoQuerySet is an queryset type for Repo
type RepoQuerySet struct {
	db *gorm.DB
}

// NewRepoQuerySet constructs new RepoQuerySet
func NewRepoQuerySet(db *gorm.DB) RepoQuerySet {
	return RepoQuerySet{
		db: db.Model(&Repo{}),
	}
}

func (qs RepoQuerySet) w(db *gorm.DB) RepoQuerySet {
	return NewRepoQuerySet(db)
}

// All is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) All(ret *[]Repo) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Create is an autogenerated method
// nolint: dupl
func (o *Repo) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) CreatedAtEq(createdAt time.Time) RepoQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) CreatedAtGt(createdAt time.Time) RepoQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) CreatedAtGte(createdAt time.Time) RepoQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) CreatedAtLt(createdAt time.Time) RepoQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) CreatedAtLte(createdAt time.Time) RepoQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) CreatedAtNe(createdAt time.Time) RepoQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// Delete is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) Delete() error {
	return qs.db.Delete(Repo{}).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *Repo) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// DeletedAtEq is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) DeletedAtEq(deletedAt time.Time) RepoQuerySet {
	return qs.w(qs.db.Where("deleted_at = ?", deletedAt))
}

// DeletedAtGt is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) DeletedAtGt(deletedAt time.Time) RepoQuerySet {
	return qs.w(qs.db.Where("deleted_at > ?", deletedAt))
}

// DeletedAtGte is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) DeletedAtGte(deletedAt time.Time) RepoQuerySet {
	return qs.w(qs.db.Where("deleted_at >= ?", deletedAt))
}

// DeletedAtIsNotNull is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) DeletedAtIsNotNull() RepoQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NOT NULL"))
}

// DeletedAtIsNull is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) DeletedAtIsNull() RepoQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NULL"))
}

// DeletedAtLt is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) DeletedAtLt(deletedAt time.Time) RepoQuerySet {
	return qs.w(qs.db.Where("deleted_at < ?", deletedAt))
}

// DeletedAtLte is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) DeletedAtLte(deletedAt time.Time) RepoQuerySet {
	return qs.w(qs.db.Where("deleted_at <= ?", deletedAt))
}

// DeletedAtNe is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) DeletedAtNe(deletedAt time.Time) RepoQuerySet {
	return qs.w(qs.db.Where("deleted_at != ?", deletedAt))
}

// DisplayNameEq is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) DisplayNameEq(displayName string) RepoQuerySet {
	return qs.w(qs.db.Where("display_name = ?", displayName))
}

// DisplayNameIn is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) DisplayNameIn(displayName ...string) RepoQuerySet {
	if len(displayName) == 0 {
		qs.db.AddError(errors.New("must at least pass one displayName in DisplayNameIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("display_name IN (?)", displayName))
}

// DisplayNameNe is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) DisplayNameNe(displayName string) RepoQuerySet {
	return qs.w(qs.db.Where("display_name != ?", displayName))
}

// DisplayNameNotIn is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) DisplayNameNotIn(displayName ...string) RepoQuerySet {
	if len(displayName) == 0 {
		qs.db.AddError(errors.New("must at least pass one displayName in DisplayNameNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("display_name NOT IN (?)", displayName))
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) GetUpdater() RepoUpdater {
	return NewRepoUpdater(qs.db)
}

// GithubHookIDEq is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) GithubHookIDEq(githubHookID int) RepoQuerySet {
	return qs.w(qs.db.Where("github_hook_id = ?", githubHookID))
}

// GithubHookIDGt is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) GithubHookIDGt(githubHookID int) RepoQuerySet {
	return qs.w(qs.db.Where("github_hook_id > ?", githubHookID))
}

// GithubHookIDGte is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) GithubHookIDGte(githubHookID int) RepoQuerySet {
	return qs.w(qs.db.Where("github_hook_id >= ?", githubHookID))
}

// GithubHookIDIn is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) GithubHookIDIn(githubHookID ...int) RepoQuerySet {
	if len(githubHookID) == 0 {
		qs.db.AddError(errors.New("must at least pass one githubHookID in GithubHookIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("github_hook_id IN (?)", githubHookID))
}

// GithubHookIDLt is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) GithubHookIDLt(githubHookID int) RepoQuerySet {
	return qs.w(qs.db.Where("github_hook_id < ?", githubHookID))
}

// GithubHookIDLte is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) GithubHookIDLte(githubHookID int) RepoQuerySet {
	return qs.w(qs.db.Where("github_hook_id <= ?", githubHookID))
}

// GithubHookIDNe is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) GithubHookIDNe(githubHookID int) RepoQuerySet {
	return qs.w(qs.db.Where("github_hook_id != ?", githubHookID))
}

// GithubHookIDNotIn is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) GithubHookIDNotIn(githubHookID ...int) RepoQuerySet {
	if len(githubHookID) == 0 {
		qs.db.AddError(errors.New("must at least pass one githubHookID in GithubHookIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("github_hook_id NOT IN (?)", githubHookID))
}

// GithubIDEq is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) GithubIDEq(githubID int) RepoQuerySet {
	return qs.w(qs.db.Where("github_id = ?", githubID))
}

// GithubIDGt is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) GithubIDGt(githubID int) RepoQuerySet {
	return qs.w(qs.db.Where("github_id > ?", githubID))
}

// GithubIDGte is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) GithubIDGte(githubID int) RepoQuerySet {
	return qs.w(qs.db.Where("github_id >= ?", githubID))
}

// GithubIDIn is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) GithubIDIn(githubID ...int) RepoQuerySet {
	if len(githubID) == 0 {
		qs.db.AddError(errors.New("must at least pass one githubID in GithubIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("github_id IN (?)", githubID))
}

// GithubIDLt is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) GithubIDLt(githubID int) RepoQuerySet {
	return qs.w(qs.db.Where("github_id < ?", githubID))
}

// GithubIDLte is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) GithubIDLte(githubID int) RepoQuerySet {
	return qs.w(qs.db.Where("github_id <= ?", githubID))
}

// GithubIDNe is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) GithubIDNe(githubID int) RepoQuerySet {
	return qs.w(qs.db.Where("github_id != ?", githubID))
}

// GithubIDNotIn is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) GithubIDNotIn(githubID ...int) RepoQuerySet {
	if len(githubID) == 0 {
		qs.db.AddError(errors.New("must at least pass one githubID in GithubIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("github_id NOT IN (?)", githubID))
}

// HookIDEq is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) HookIDEq(hookID string) RepoQuerySet {
	return qs.w(qs.db.Where("hook_id = ?", hookID))
}

// HookIDIn is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) HookIDIn(hookID ...string) RepoQuerySet {
	if len(hookID) == 0 {
		qs.db.AddError(errors.New("must at least pass one hookID in HookIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("hook_id IN (?)", hookID))
}

// HookIDNe is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) HookIDNe(hookID string) RepoQuerySet {
	return qs.w(qs.db.Where("hook_id != ?", hookID))
}

// HookIDNotIn is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) HookIDNotIn(hookID ...string) RepoQuerySet {
	if len(hookID) == 0 {
		qs.db.AddError(errors.New("must at least pass one hookID in HookIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("hook_id NOT IN (?)", hookID))
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) IDEq(ID uint) RepoQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) IDGt(ID uint) RepoQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) IDGte(ID uint) RepoQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) IDIn(ID ...uint) RepoQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id IN (?)", ID))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) IDLt(ID uint) RepoQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) IDLte(ID uint) RepoQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) IDNe(ID uint) RepoQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) IDNotIn(ID ...uint) RepoQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", ID))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) Limit(limit int) RepoQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// NameEq is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) NameEq(name string) RepoQuerySet {
	return qs.w(qs.db.Where("name = ?", name))
}

// NameIn is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) NameIn(name ...string) RepoQuerySet {
	if len(name) == 0 {
		qs.db.AddError(errors.New("must at least pass one name in NameIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("name IN (?)", name))
}

// NameNe is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) NameNe(name string) RepoQuerySet {
	return qs.w(qs.db.Where("name != ?", name))
}

// NameNotIn is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) NameNotIn(name ...string) RepoQuerySet {
	if len(name) == 0 {
		qs.db.AddError(errors.New("must at least pass one name in NameNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("name NOT IN (?)", name))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) Offset(offset int) RepoQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs RepoQuerySet) One(ret *Repo) error {
	return qs.db.First(ret).Error
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) OrderAscByCreatedAt() RepoQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByDeletedAt is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) OrderAscByDeletedAt() RepoQuerySet {
	return qs.w(qs.db.Order("deleted_at ASC"))
}

// OrderAscByGithubHookID is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) OrderAscByGithubHookID() RepoQuerySet {
	return qs.w(qs.db.Order("github_hook_id ASC"))
}

// OrderAscByGithubID is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) OrderAscByGithubID() RepoQuerySet {
	return qs.w(qs.db.Order("github_id ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) OrderAscByID() RepoQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) OrderAscByUpdatedAt() RepoQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderAscByUserID is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) OrderAscByUserID() RepoQuerySet {
	return qs.w(qs.db.Order("user_id ASC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) OrderDescByCreatedAt() RepoQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByDeletedAt is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) OrderDescByDeletedAt() RepoQuerySet {
	return qs.w(qs.db.Order("deleted_at DESC"))
}

// OrderDescByGithubHookID is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) OrderDescByGithubHookID() RepoQuerySet {
	return qs.w(qs.db.Order("github_hook_id DESC"))
}

// OrderDescByGithubID is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) OrderDescByGithubID() RepoQuerySet {
	return qs.w(qs.db.Order("github_id DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) OrderDescByID() RepoQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) OrderDescByUpdatedAt() RepoQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// OrderDescByUserID is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) OrderDescByUserID() RepoQuerySet {
	return qs.w(qs.db.Order("user_id DESC"))
}

// ProviderEq is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) ProviderEq(provider string) RepoQuerySet {
	return qs.w(qs.db.Where("provider = ?", provider))
}

// ProviderIn is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) ProviderIn(provider ...string) RepoQuerySet {
	if len(provider) == 0 {
		qs.db.AddError(errors.New("must at least pass one provider in ProviderIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("provider IN (?)", provider))
}

// ProviderNe is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) ProviderNe(provider string) RepoQuerySet {
	return qs.w(qs.db.Where("provider != ?", provider))
}

// ProviderNotIn is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) ProviderNotIn(provider ...string) RepoQuerySet {
	if len(provider) == 0 {
		qs.db.AddError(errors.New("must at least pass one provider in ProviderNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("provider NOT IN (?)", provider))
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u RepoUpdater) SetCreatedAt(createdAt time.Time) RepoUpdater {
	u.fields[string(RepoDBSchema.CreatedAt)] = createdAt
	return u
}

// SetDeletedAt is an autogenerated method
// nolint: dupl
func (u RepoUpdater) SetDeletedAt(deletedAt *time.Time) RepoUpdater {
	u.fields[string(RepoDBSchema.DeletedAt)] = deletedAt
	return u
}

// SetDisplayName is an autogenerated method
// nolint: dupl
func (u RepoUpdater) SetDisplayName(displayName string) RepoUpdater {
	u.fields[string(RepoDBSchema.DisplayName)] = displayName
	return u
}

// SetGithubHookID is an autogenerated method
// nolint: dupl
func (u RepoUpdater) SetGithubHookID(githubHookID int) RepoUpdater {
	u.fields[string(RepoDBSchema.GithubHookID)] = githubHookID
	return u
}

// SetGithubID is an autogenerated method
// nolint: dupl
func (u RepoUpdater) SetGithubID(githubID int) RepoUpdater {
	u.fields[string(RepoDBSchema.GithubID)] = githubID
	return u
}

// SetHookID is an autogenerated method
// nolint: dupl
func (u RepoUpdater) SetHookID(hookID string) RepoUpdater {
	u.fields[string(RepoDBSchema.HookID)] = hookID
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u RepoUpdater) SetID(ID uint) RepoUpdater {
	u.fields[string(RepoDBSchema.ID)] = ID
	return u
}

// SetName is an autogenerated method
// nolint: dupl
func (u RepoUpdater) SetName(name string) RepoUpdater {
	u.fields[string(RepoDBSchema.Name)] = name
	return u
}

// SetProvider is an autogenerated method
// nolint: dupl
func (u RepoUpdater) SetProvider(provider string) RepoUpdater {
	u.fields[string(RepoDBSchema.Provider)] = provider
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u RepoUpdater) SetUpdatedAt(updatedAt time.Time) RepoUpdater {
	u.fields[string(RepoDBSchema.UpdatedAt)] = updatedAt
	return u
}

// SetUserID is an autogenerated method
// nolint: dupl
func (u RepoUpdater) SetUserID(userID uint) RepoUpdater {
	u.fields[string(RepoDBSchema.UserID)] = userID
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u RepoUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u RepoUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) UpdatedAtEq(updatedAt time.Time) RepoQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) UpdatedAtGt(updatedAt time.Time) RepoQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) UpdatedAtGte(updatedAt time.Time) RepoQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) UpdatedAtLt(updatedAt time.Time) RepoQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) UpdatedAtLte(updatedAt time.Time) RepoQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) UpdatedAtNe(updatedAt time.Time) RepoQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// UserIDEq is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) UserIDEq(userID uint) RepoQuerySet {
	return qs.w(qs.db.Where("user_id = ?", userID))
}

// UserIDGt is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) UserIDGt(userID uint) RepoQuerySet {
	return qs.w(qs.db.Where("user_id > ?", userID))
}

// UserIDGte is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) UserIDGte(userID uint) RepoQuerySet {
	return qs.w(qs.db.Where("user_id >= ?", userID))
}

// UserIDIn is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) UserIDIn(userID ...uint) RepoQuerySet {
	if len(userID) == 0 {
		qs.db.AddError(errors.New("must at least pass one userID in UserIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("user_id IN (?)", userID))
}

// UserIDLt is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) UserIDLt(userID uint) RepoQuerySet {
	return qs.w(qs.db.Where("user_id < ?", userID))
}

// UserIDLte is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) UserIDLte(userID uint) RepoQuerySet {
	return qs.w(qs.db.Where("user_id <= ?", userID))
}

// UserIDNe is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) UserIDNe(userID uint) RepoQuerySet {
	return qs.w(qs.db.Where("user_id != ?", userID))
}

// UserIDNotIn is an autogenerated method
// nolint: dupl
func (qs RepoQuerySet) UserIDNotIn(userID ...uint) RepoQuerySet {
	if len(userID) == 0 {
		qs.db.AddError(errors.New("must at least pass one userID in UserIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("user_id NOT IN (?)", userID))
}

// ===== END of query set RepoQuerySet

// ===== BEGIN of Repo modifiers

// RepoDBSchemaField describes database schema field. It requires for method 'Update'
type RepoDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f RepoDBSchemaField) String() string {
	return string(f)
}

// RepoDBSchema stores db field names of Repo
var RepoDBSchema = struct {
	ID           RepoDBSchemaField
	CreatedAt    RepoDBSchemaField
	UpdatedAt    RepoDBSchemaField
	DeletedAt    RepoDBSchemaField
	UserID       RepoDBSchemaField
	Name         RepoDBSchemaField
	DisplayName  RepoDBSchemaField
	HookID       RepoDBSchemaField
	Provider     RepoDBSchemaField
	GithubHookID RepoDBSchemaField
	GithubID     RepoDBSchemaField
}{

	ID:           RepoDBSchemaField("id"),
	CreatedAt:    RepoDBSchemaField("created_at"),
	UpdatedAt:    RepoDBSchemaField("updated_at"),
	DeletedAt:    RepoDBSchemaField("deleted_at"),
	UserID:       RepoDBSchemaField("user_id"),
	Name:         RepoDBSchemaField("name"),
	DisplayName:  RepoDBSchemaField("display_name"),
	HookID:       RepoDBSchemaField("hook_id"),
	Provider:     RepoDBSchemaField("provider"),
	GithubHookID: RepoDBSchemaField("github_hook_id"),
	GithubID:     RepoDBSchemaField("github_id"),
}

// Update updates Repo fields by primary key
// nolint: dupl
func (o *Repo) Update(db *gorm.DB, fields ...RepoDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":             o.ID,
		"created_at":     o.CreatedAt,
		"updated_at":     o.UpdatedAt,
		"deleted_at":     o.DeletedAt,
		"user_id":        o.UserID,
		"name":           o.Name,
		"display_name":   o.DisplayName,
		"hook_id":        o.HookID,
		"provider":       o.Provider,
		"github_hook_id": o.GithubHookID,
		"github_id":      o.GithubID,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update Repo %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// RepoUpdater is an Repo updates manager
type RepoUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewRepoUpdater creates new Repo updater
// nolint: dupl
func NewRepoUpdater(db *gorm.DB) RepoUpdater {
	return RepoUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&Repo{}),
	}
}

// ===== END of Repo modifiers

// ===== END of all query sets
