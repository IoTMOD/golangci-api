// Code generated by MockGen. DO NOT EDIT.
// Source: executor.go

// Package executors is a generated GoMock package.
package executors

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockExecutor is a mock of Executor interface
type MockExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockExecutorMockRecorder
}

// MockExecutorMockRecorder is the mock recorder for MockExecutor
type MockExecutorMockRecorder struct {
	mock *MockExecutor
}

// NewMockExecutor creates a new mock instance
func NewMockExecutor(ctrl *gomock.Controller) *MockExecutor {
	mock := &MockExecutor{ctrl: ctrl}
	mock.recorder = &MockExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExecutor) EXPECT() *MockExecutorMockRecorder {
	return m.recorder
}

// Setup mocks base method
func (m *MockExecutor) Setup(ctx context.Context, req *Requirements) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup
func (mr *MockExecutorMockRecorder) Setup(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockExecutor)(nil).Setup), ctx, req)
}

// Run mocks base method
func (m *MockExecutor) Run(ctx context.Context, name string, args ...string) (*RunResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, name}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Run", varargs...)
	ret0, _ := ret[0].(*RunResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run
func (mr *MockExecutorMockRecorder) Run(ctx, name interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, name}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockExecutor)(nil).Run), varargs...)
}

// WithEnv mocks base method
func (m *MockExecutor) WithEnv(k, v string) Executor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithEnv", k, v)
	ret0, _ := ret[0].(Executor)
	return ret0
}

// WithEnv indicates an expected call of WithEnv
func (mr *MockExecutorMockRecorder) WithEnv(k, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithEnv", reflect.TypeOf((*MockExecutor)(nil).WithEnv), k, v)
}

// SetEnv mocks base method
func (m *MockExecutor) SetEnv(k, v string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEnv", k, v)
}

// SetEnv indicates an expected call of SetEnv
func (mr *MockExecutorMockRecorder) SetEnv(k, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEnv", reflect.TypeOf((*MockExecutor)(nil).SetEnv), k, v)
}

// WorkDir mocks base method
func (m *MockExecutor) WorkDir() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// WorkDir indicates an expected call of WorkDir
func (mr *MockExecutorMockRecorder) WorkDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkDir", reflect.TypeOf((*MockExecutor)(nil).WorkDir))
}

// WithWorkDir mocks base method
func (m *MockExecutor) WithWorkDir(wd string) Executor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithWorkDir", wd)
	ret0, _ := ret[0].(Executor)
	return ret0
}

// WithWorkDir indicates an expected call of WithWorkDir
func (mr *MockExecutorMockRecorder) WithWorkDir(wd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithWorkDir", reflect.TypeOf((*MockExecutor)(nil).WithWorkDir), wd)
}

// CopyFile mocks base method
func (m *MockExecutor) CopyFile(ctx context.Context, dst, src string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyFile", ctx, dst, src)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyFile indicates an expected call of CopyFile
func (mr *MockExecutorMockRecorder) CopyFile(ctx, dst, src interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFile", reflect.TypeOf((*MockExecutor)(nil).CopyFile), ctx, dst, src)
}

// Clean mocks base method
func (m *MockExecutor) Clean() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clean")
}

// Clean indicates an expected call of Clean
func (mr *MockExecutorMockRecorder) Clean() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clean", reflect.TypeOf((*MockExecutor)(nil).Clean))
}
