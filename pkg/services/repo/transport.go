// Code generated by genservices. DO NOT EDIT.
package repo

import (
	"context"
	"encoding/json"
	"net/http"

	httptransport "github.com/go-kit/kit/transport/http"
	"github.com/golangci/golangci-api/pkg/transportutil"
	"github.com/golangci/golangci-shared/pkg/apperrors"
	"github.com/golangci/golangci-shared/pkg/logutil"
	"github.com/gorilla/mux"
	"github.com/pkg/errors"
)

func RegisterHandlers(r *mux.Router, svc Service, log logutil.Log, et apperrors.Tracker) {

	hCreate := httptransport.NewServer(
		makeCreateEndpoint(svc, log),
		decodeCreateRequest,
		encodeCreateResponse,
		httptransport.ServerBefore(transportutil.MakeStoreRequestContext(log, et)),
		httptransport.ServerFinalizer(transportutil.FinalizeRequest),
		httptransport.ServerErrorEncoder(transportutil.EncodeError),
		httptransport.ServerErrorLogger(transportutil.AdaptErrorLogger(log)),
	)
	r.Methods("POST").Path("/v1/repos").Handler(hCreate)

}

func decodeCreateRequest(_ context.Context, r *http.Request) (interface{}, error) {
	var request CreateRequest
	if err := transportutil.DecodeRequest(&request, r); err != nil {
		return nil, errors.Wrap(err, "can't decode request")
	}

	return request, nil
}

func encodeCreateResponse(_ context.Context, w http.ResponseWriter, response interface{}) error {
	w.Header().Add("Content-Type", "application/json; charset=UTF-8")

	resp := response.(CreateResponse)
	wrappedResp := struct {
		Error *transportutil.Error
		CreateResponse
	}{
		CreateResponse: resp,
	}

	if resp.err != nil {
		terr := transportutil.MakeError(resp.err)
		wrappedResp.Error = terr
		w.WriteHeader(terr.HTTPCode)
	}

	return json.NewEncoder(w).Encode(wrappedResp)
}
