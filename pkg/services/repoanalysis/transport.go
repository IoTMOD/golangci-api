// Code generated by genservices. DO NOT EDIT.
package repoanalysis

import (
	"context"
	"encoding/json"
	"net/http"

	httptransport "github.com/go-kit/kit/transport/http"
	"github.com/golangci/golangci-api/pkg/apperrors"
	"github.com/golangci/golangci-api/pkg/logutil"
	"github.com/golangci/golangci-api/pkg/transportutil"
	"github.com/gorilla/mux"
	"github.com/pkg/errors"
)

func RegisterHandlers(r *mux.Router, svc Service, log logutil.Log, et apperrors.Tracker) {

	hGetStatus := httptransport.NewServer(
		makeGetStatusEndpoint(svc, log),
		decodeGetStatusRequest,
		encodeGetStatusResponse,
		httptransport.ServerBefore(transportutil.MakeStoreRequestContext(log, et)),
		httptransport.ServerFinalizer(transportutil.FinalizeRequest),
		httptransport.ServerErrorEncoder(transportutil.EncodeError),
		httptransport.ServerErrorLogger(transportutil.AdaptErrorLogger(log)),
	)
	r.Methods("GET").Path("/v1/repos/{provider}/{owner}/{name}/repoanalyzes").Handler(hGetStatus)

	hGet := httptransport.NewServer(
		makeGetEndpoint(svc, log),
		decodeGetRequest,
		encodeGetResponse,
		httptransport.ServerBefore(transportutil.MakeStoreRequestContext(log, et)),
		httptransport.ServerFinalizer(transportutil.FinalizeRequest),
		httptransport.ServerErrorEncoder(transportutil.EncodeError),
		httptransport.ServerErrorLogger(transportutil.AdaptErrorLogger(log)),
	)
	r.Methods("GET").Path("/v1/repos/{provider}/{owner}/{name}/repoanalyzes/{analysisguid}").Handler(hGet)

	hUpdate := httptransport.NewServer(
		makeUpdateEndpoint(svc, log),
		decodeUpdateRequest,
		encodeUpdateResponse,
		httptransport.ServerBefore(transportutil.MakeStoreRequestContext(log, et)),
		httptransport.ServerFinalizer(transportutil.FinalizeRequest),
		httptransport.ServerErrorEncoder(transportutil.EncodeError),
		httptransport.ServerErrorLogger(transportutil.AdaptErrorLogger(log)),
	)
	r.Methods("PUT").Path("/v1/repos/{provider}/{owner}/{name}/repoanalyzes/{analysisguid}").Handler(hUpdate)

}

func decodeGetStatusRequest(_ context.Context, r *http.Request) (interface{}, error) {
	var request GetStatusRequest
	if err := transportutil.DecodeRequest(&request, r); err != nil {
		return nil, errors.Wrap(err, "can't decode request")
	}

	return request, nil
}

func encodeGetStatusResponse(_ context.Context, w http.ResponseWriter, response interface{}) error {
	w.Header().Add("Content-Type", "application/json; charset=UTF-8")

	resp := response.(GetStatusResponse)
	if resp.Error != nil {
		err := transportutil.MakeError(resp.Error)
		w.WriteHeader(err.HTTPCode)
	}

	return json.NewEncoder(w).Encode(response)
}

func decodeGetRequest(_ context.Context, r *http.Request) (interface{}, error) {
	var request GetRequest
	if err := transportutil.DecodeRequest(&request, r); err != nil {
		return nil, errors.Wrap(err, "can't decode request")
	}

	return request, nil
}

func encodeGetResponse(_ context.Context, w http.ResponseWriter, response interface{}) error {
	w.Header().Add("Content-Type", "application/json; charset=UTF-8")

	resp := response.(GetResponse)
	if resp.Error != nil {
		err := transportutil.MakeError(resp.Error)
		w.WriteHeader(err.HTTPCode)
	}

	return json.NewEncoder(w).Encode(response)
}

func decodeUpdateRequest(_ context.Context, r *http.Request) (interface{}, error) {
	var request UpdateRequest
	if err := transportutil.DecodeRequest(&request, r); err != nil {
		return nil, errors.Wrap(err, "can't decode request")
	}

	return request, nil
}

func encodeUpdateResponse(_ context.Context, w http.ResponseWriter, response interface{}) error {
	w.Header().Add("Content-Type", "application/json; charset=UTF-8")

	resp := response.(UpdateResponse)
	if resp.Error != nil {
		err := transportutil.MakeError(resp.Error)
		w.WriteHeader(err.HTTPCode)
	}

	return json.NewEncoder(w).Encode(response)
}
