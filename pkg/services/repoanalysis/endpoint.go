// Code generated by genservices. DO NOT EDIT.
package repoanalysis

import (
	"context"
	"errors"
	"runtime/debug"

	"github.com/go-kit/kit/endpoint"
	"github.com/golangci/golangci-api/pkg/endpointutil"
	"github.com/golangci/golangci-api/pkg/models"
	"github.com/golangci/golangci-api/pkg/request"
	"github.com/golangci/golangci-shared/pkg/logutil"
)

type GetStatusRequest struct {
	Repo *request.Repo
}

type GetStatusResponse struct {
	err error
	*Status
}

func makeGetStatusEndpoint(svc Service, log logutil.Log) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (resp interface{}, err error) {
		req := request.(GetStatusRequest)
		rc := endpointutil.RequestContext(ctx)
		defer func() {
			if rerr := recover(); rerr != nil {
				rc.Log.Errorf("Panic occured")
				rc.Log.Infof("%s", debug.Stack())
				resp = GetStatusResponse{
					err: errors.New("panic occured"),
				}
				err = nil
			}
		}()

		req.Repo.FillLogContext(rc.Lctx)

		v, err := svc.GetStatus(rc, req.Repo)
		if err != nil {
			rc.Log.Errorf("repoanalysis.Service.GetStatus failed: %s", err)
			return GetStatusResponse{err, v}, nil
		}

		return GetStatusResponse{nil, v}, nil

	}
}

type GetRequest struct {
	Rac *Context
}

type GetResponse struct {
	err error
	*models.RepoAnalysis
}

func makeGetEndpoint(svc Service, log logutil.Log) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (resp interface{}, err error) {
		req := request.(GetRequest)
		rc := endpointutil.RequestContext(ctx)
		defer func() {
			if rerr := recover(); rerr != nil {
				rc.Log.Errorf("Panic occured")
				rc.Log.Infof("%s", debug.Stack())
				resp = GetResponse{
					err: errors.New("panic occured"),
				}
				err = nil
			}
		}()

		req.Rac.FillLogContext(rc.Lctx)

		v, err := svc.Get(rc, req.Rac)
		if err != nil {
			rc.Log.Errorf("repoanalysis.Service.Get failed: %s", err)
			return GetResponse{err, v}, nil
		}

		return GetResponse{nil, v}, nil

	}
}

type UpdateRequest struct {
	Rac    *Context
	Update *updateRepoPayload
}

type UpdateResponse struct {
	err error
}

func makeUpdateEndpoint(svc Service, log logutil.Log) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (resp interface{}, err error) {
		req := request.(UpdateRequest)
		rc := endpointutil.RequestContext(ctx)
		defer func() {
			if rerr := recover(); rerr != nil {
				rc.Log.Errorf("Panic occured")
				rc.Log.Infof("%s", debug.Stack())
				resp = UpdateResponse{
					err: errors.New("panic occured"),
				}
				err = nil
			}
		}()

		req.Rac.FillLogContext(rc.Lctx)
		req.Update.FillLogContext(rc.Lctx)

		err = svc.Update(rc, req.Rac, req.Update)
		if err != nil {
			rc.Log.Errorf("repoanalysis.Service.Update failed: %s", err)
			return UpdateResponse{err}, nil
		}

		return UpdateResponse{nil}, nil

	}
}
