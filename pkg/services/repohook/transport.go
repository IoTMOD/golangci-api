// Code generated by genservices. DO NOT EDIT.
package repohook

import (
	"context"
	"encoding/json"
	"net/http"

	httptransport "github.com/go-kit/kit/transport/http"
	"github.com/golangci/golangci-api/pkg/session"
	"github.com/golangci/golangci-api/pkg/transportutil"
	"github.com/golangci/golangci-shared/pkg/apperrors"
	"github.com/golangci/golangci-shared/pkg/logutil"
	"github.com/gorilla/mux"
	"github.com/jinzhu/gorm"
	"github.com/pkg/errors"
)

func RegisterHandlers(r *mux.Router, svc Service, log logutil.Log, et apperrors.Tracker, db *gorm.DB, sf *session.Factory) {

	hHandleGithubWebhook := httptransport.NewServer(
		makeHandleGithubWebhookEndpoint(svc, log),
		decodeHandleGithubWebhookRequest,
		encodeHandleGithubWebhookResponse,

		httptransport.ServerBefore(transportutil.MakeStoreAnonymousRequestContext(log, et, db)),

		httptransport.ServerFinalizer(transportutil.FinalizeRequest),
		httptransport.ServerErrorEncoder(transportutil.EncodeError),
		httptransport.ServerErrorLogger(transportutil.AdaptErrorLogger(log)),
	)
	r.Methods("POST").Path("/v1/repos/{owner}/{name}/hooks/{hookid}").Handler(hHandleGithubWebhook)

}

func decodeHandleGithubWebhookRequest(_ context.Context, r *http.Request) (interface{}, error) {
	var request HandleGithubWebhookRequest
	if err := transportutil.DecodeRequest(&request, r); err != nil {
		return nil, errors.Wrap(err, "can't decode request")
	}

	return request, nil
}

func encodeHandleGithubWebhookResponse(ctx context.Context, w http.ResponseWriter, response interface{}) error {
	w.Header().Add("Content-Type", "application/json; charset=UTF-8")
	if err := transportutil.GetContextError(ctx); err != nil {
		wrappedResp := struct {
			Error *transportutil.Error
		}{
			Error: transportutil.MakeError(err),
		}
		w.WriteHeader(wrappedResp.Error.HTTPCode)
		return json.NewEncoder(w).Encode(wrappedResp)
	}

	resp := response.(HandleGithubWebhookResponse)
	wrappedResp := struct {
		Error *transportutil.Error
		HandleGithubWebhookResponse
	}{
		HandleGithubWebhookResponse: resp,
	}

	if resp.err != nil {
		terr := transportutil.MakeError(resp.err)
		wrappedResp.Error = terr
		w.WriteHeader(terr.HTTPCode)
	}

	return json.NewEncoder(w).Encode(wrappedResp)
}
