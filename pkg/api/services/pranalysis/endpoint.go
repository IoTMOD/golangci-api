// Code generated by genservices. DO NOT EDIT.
package pranalysis

import (
	"context"
	"runtime/debug"

	"github.com/go-kit/kit/endpoint"
	"github.com/golangci/golangci-api/internal/api/apierrors"
	"github.com/golangci/golangci-api/internal/api/endpointutil"
	"github.com/golangci/golangci-api/internal/shared/logutil"
	"github.com/golangci/golangci-api/pkg/api/request"
	"github.com/pkg/errors"
)

type GetAnalysisStateByAnalysisGUIDRequest struct {
	Req *AnalyzedRepo
}

type GetAnalysisStateByAnalysisGUIDResponse struct {
	err error
	*State
}

func makeGetAnalysisStateByAnalysisGUIDEndpoint(svc Service, log logutil.Log) endpoint.Endpoint {
	return func(ctx context.Context, reqObj interface{}) (resp interface{}, err error) {

		req := reqObj.(GetAnalysisStateByAnalysisGUIDRequest)

		reqLogger := log
		defer func() {
			if rerr := recover(); rerr != nil {
				reqLogger.Errorf("Panic occured")
				reqLogger.Infof("%s", debug.Stack())
				resp = GetAnalysisStateByAnalysisGUIDResponse{
					err: errors.New("panic occured"),
				}
				err = nil
			}
		}()

		if err := endpointutil.Error(ctx); err != nil {
			log.Warnf("Error occurred during request context creation: %s", err)
			resp = GetAnalysisStateByAnalysisGUIDResponse{
				err: err,
			}
			return resp, nil
		}

		rc := endpointutil.RequestContext(ctx).(*request.InternalContext)
		reqLogger = rc.Log

		req.Req.FillLogContext(rc.Lctx)

		v, err := svc.GetAnalysisStateByAnalysisGUID(rc, req.Req)
		if err != nil {
			rc.Log.Errorf("pranalysis.Service.GetAnalysisStateByAnalysisGUID failed: %s", err)
			return GetAnalysisStateByAnalysisGUIDResponse{err, v}, nil
		}

		return GetAnalysisStateByAnalysisGUIDResponse{nil, v}, nil

	}
}

type GetAnalysisStateByPRNumberRequest struct {
	Req *RepoPullRequest
}

type GetAnalysisStateByPRNumberResponse struct {
	err error
	*State
}

func makeGetAnalysisStateByPRNumberEndpoint(svc Service, log logutil.Log) endpoint.Endpoint {
	return func(ctx context.Context, reqObj interface{}) (resp interface{}, err error) {

		req := reqObj.(GetAnalysisStateByPRNumberRequest)

		reqLogger := log
		defer func() {
			if rerr := recover(); rerr != nil {
				reqLogger.Errorf("Panic occured")
				reqLogger.Infof("%s", debug.Stack())
				resp = GetAnalysisStateByPRNumberResponse{
					err: errors.New("panic occured"),
				}
				err = nil
			}
		}()

		if err := endpointutil.Error(ctx); err != nil {
			log.Warnf("Error occurred during request context creation: %s", err)
			resp = GetAnalysisStateByPRNumberResponse{
				err: err,
			}
			return resp, nil
		}

		rc := endpointutil.RequestContext(ctx).(*request.AnonymousContext)
		reqLogger = rc.Log

		req.Req.FillLogContext(rc.Lctx)

		v, err := svc.GetAnalysisStateByPRNumber(rc, req.Req)
		if err != nil {
			rc.Log.Errorf("pranalysis.Service.GetAnalysisStateByPRNumber failed: %s", err)
			return GetAnalysisStateByPRNumberResponse{err, v}, nil
		}

		return GetAnalysisStateByPRNumberResponse{nil, v}, nil

	}
}

type UpdateAnalysisStateByAnalysisGUIDRequest struct {
	Req   *AnalyzedRepo
	State *State
}

type UpdateAnalysisStateByAnalysisGUIDResponse struct {
	err error
}

func makeUpdateAnalysisStateByAnalysisGUIDEndpoint(svc Service, log logutil.Log) endpoint.Endpoint {
	return func(ctx context.Context, reqObj interface{}) (resp interface{}, err error) {

		req := reqObj.(UpdateAnalysisStateByAnalysisGUIDRequest)

		reqLogger := log
		defer func() {
			if rerr := recover(); rerr != nil {
				reqLogger.Errorf("Panic occured")
				reqLogger.Infof("%s", debug.Stack())
				resp = UpdateAnalysisStateByAnalysisGUIDResponse{
					err: errors.New("panic occured"),
				}
				err = nil
			}
		}()

		if err := endpointutil.Error(ctx); err != nil {
			log.Warnf("Error occurred during request context creation: %s", err)
			resp = UpdateAnalysisStateByAnalysisGUIDResponse{
				err: err,
			}
			return resp, nil
		}

		rc := endpointutil.RequestContext(ctx).(*request.InternalContext)
		reqLogger = rc.Log

		req.Req.FillLogContext(rc.Lctx)
		req.State.FillLogContext(rc.Lctx)

		err = svc.UpdateAnalysisStateByAnalysisGUID(rc, req.Req, req.State)
		if err != nil {
			if !apierrors.IsErrorLikeResult(err) {
				rc.Log.Errorf("pranalysis.Service.UpdateAnalysisStateByAnalysisGUID failed: %s", err)
			}
			return UpdateAnalysisStateByAnalysisGUIDResponse{err}, nil
		}

		return UpdateAnalysisStateByAnalysisGUIDResponse{nil}, nil

	}
}
