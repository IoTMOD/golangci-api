// Code generated by genservices. DO NOT EDIT.
package auth

import (
	"context"
	"errors"
	"runtime/debug"

	"github.com/go-kit/kit/endpoint"
	"github.com/golangci/golangci-api/internal/api/apierrors"
	"github.com/golangci/golangci-api/internal/api/endpointutil"
	"github.com/golangci/golangci-api/internal/shared/logutil"
	"github.com/golangci/golangci-api/pkg/api/request"
	"github.com/golangci/golangci-api/pkg/api/returntypes"
)

type CheckAuthRequest struct {
}

type CheckAuthResponse struct {
	err error
	*returntypes.CheckAuthResponse
}

func makeCheckAuthEndpoint(svc Service, log logutil.Log) endpoint.Endpoint {
	return func(ctx context.Context, reqObj interface{}) (resp interface{}, err error) {

		reqLogger := log
		defer func() {
			if rerr := recover(); rerr != nil {
				reqLogger.Errorf("Panic occured")
				reqLogger.Infof("%s", debug.Stack())
				resp = CheckAuthResponse{
					err: errors.New("panic occured"),
				}
				err = nil
			}
		}()

		if err := endpointutil.Error(ctx); err != nil {
			log.Warnf("Error occurred during request context creation: %s", err)
			resp = CheckAuthResponse{
				err: err,
			}
			return resp, nil
		}

		rc := endpointutil.RequestContext(ctx).(*request.AuthorizedContext)
		reqLogger = rc.Log

		v, err := svc.CheckAuth(rc)
		if err != nil {
			rc.Log.Errorf("auth.Service.CheckAuth failed: %s", err)
			return CheckAuthResponse{err, v}, nil
		}

		return CheckAuthResponse{nil, v}, nil

	}
}

type LogoutRequest struct {
}

type LogoutResponse struct {
	err error
}

func makeLogoutEndpoint(svc Service, log logutil.Log) endpoint.Endpoint {
	return func(ctx context.Context, reqObj interface{}) (resp interface{}, err error) {

		reqLogger := log
		defer func() {
			if rerr := recover(); rerr != nil {
				reqLogger.Errorf("Panic occured")
				reqLogger.Infof("%s", debug.Stack())
				resp = LogoutResponse{
					err: errors.New("panic occured"),
				}
				err = nil
			}
		}()

		if err := endpointutil.Error(ctx); err != nil {
			log.Warnf("Error occurred during request context creation: %s", err)
			resp = LogoutResponse{
				err: err,
			}
			return resp, nil
		}

		rc := endpointutil.RequestContext(ctx).(*request.AuthorizedContext)
		reqLogger = rc.Log

		err = svc.Logout(rc)
		if err != nil {
			if !apierrors.IsErrorLikeResult(err) {
				rc.Log.Errorf("auth.Service.Logout failed: %s", err)
			}
			return LogoutResponse{err}, nil
		}

		return LogoutResponse{nil}, nil

	}
}

type UnlinkProviderRequest struct {
}

type UnlinkProviderResponse struct {
	err error
}

func makeUnlinkProviderEndpoint(svc Service, log logutil.Log) endpoint.Endpoint {
	return func(ctx context.Context, reqObj interface{}) (resp interface{}, err error) {

		reqLogger := log
		defer func() {
			if rerr := recover(); rerr != nil {
				reqLogger.Errorf("Panic occured")
				reqLogger.Infof("%s", debug.Stack())
				resp = UnlinkProviderResponse{
					err: errors.New("panic occured"),
				}
				err = nil
			}
		}()

		if err := endpointutil.Error(ctx); err != nil {
			log.Warnf("Error occurred during request context creation: %s", err)
			resp = UnlinkProviderResponse{
				err: err,
			}
			return resp, nil
		}

		rc := endpointutil.RequestContext(ctx).(*request.AuthorizedContext)
		reqLogger = rc.Log

		err = svc.UnlinkProvider(rc)
		if err != nil {
			if !apierrors.IsErrorLikeResult(err) {
				rc.Log.Errorf("auth.Service.UnlinkProvider failed: %s", err)
			}
			return UnlinkProviderResponse{err}, nil
		}

		return UnlinkProviderResponse{nil}, nil

	}
}

type ReloginRequest struct {
}

type ReloginResponse struct {
	err error
}

func makeReloginEndpoint(svc Service, log logutil.Log) endpoint.Endpoint {
	return func(ctx context.Context, reqObj interface{}) (resp interface{}, err error) {

		reqLogger := log
		defer func() {
			if rerr := recover(); rerr != nil {
				reqLogger.Errorf("Panic occured")
				reqLogger.Infof("%s", debug.Stack())
				resp = ReloginResponse{
					err: errors.New("panic occured"),
				}
				err = nil
			}
		}()

		if err := endpointutil.Error(ctx); err != nil {
			log.Warnf("Error occurred during request context creation: %s", err)
			resp = ReloginResponse{
				err: err,
			}
			return resp, nil
		}

		rc := endpointutil.RequestContext(ctx).(*request.AuthorizedContext)
		reqLogger = rc.Log

		err = svc.Relogin(rc)
		if err != nil {
			if !apierrors.IsErrorLikeResult(err) {
				rc.Log.Errorf("auth.Service.Relogin failed: %s", err)
			}
			return ReloginResponse{err}, nil
		}

		return ReloginResponse{nil}, nil

	}
}

type LoginPublicRequest struct {
	Req *Request
}

type LoginPublicResponse struct {
	err error
}

func makeLoginPublicEndpoint(svc Service, log logutil.Log) endpoint.Endpoint {
	return func(ctx context.Context, reqObj interface{}) (resp interface{}, err error) {

		req := reqObj.(LoginPublicRequest)

		reqLogger := log
		defer func() {
			if rerr := recover(); rerr != nil {
				reqLogger.Errorf("Panic occured")
				reqLogger.Infof("%s", debug.Stack())
				resp = LoginPublicResponse{
					err: errors.New("panic occured"),
				}
				err = nil
			}
		}()

		if err := endpointutil.Error(ctx); err != nil {
			log.Warnf("Error occurred during request context creation: %s", err)
			resp = LoginPublicResponse{
				err: err,
			}
			return resp, nil
		}

		rc := endpointutil.RequestContext(ctx).(*request.AnonymousContext)
		reqLogger = rc.Log

		req.Req.FillLogContext(rc.Lctx)

		err = svc.LoginPublic(rc, req.Req)
		if err != nil {
			if !apierrors.IsErrorLikeResult(err) {
				rc.Log.Errorf("auth.Service.LoginPublic failed: %s", err)
			}
			return LoginPublicResponse{err}, nil
		}

		return LoginPublicResponse{nil}, nil

	}
}

type LoginPrivateRequest struct {
	Req *Request
}

type LoginPrivateResponse struct {
	err error
}

func makeLoginPrivateEndpoint(svc Service, log logutil.Log) endpoint.Endpoint {
	return func(ctx context.Context, reqObj interface{}) (resp interface{}, err error) {

		req := reqObj.(LoginPrivateRequest)

		reqLogger := log
		defer func() {
			if rerr := recover(); rerr != nil {
				reqLogger.Errorf("Panic occured")
				reqLogger.Infof("%s", debug.Stack())
				resp = LoginPrivateResponse{
					err: errors.New("panic occured"),
				}
				err = nil
			}
		}()

		if err := endpointutil.Error(ctx); err != nil {
			log.Warnf("Error occurred during request context creation: %s", err)
			resp = LoginPrivateResponse{
				err: err,
			}
			return resp, nil
		}

		rc := endpointutil.RequestContext(ctx).(*request.AuthorizedContext)
		reqLogger = rc.Log

		req.Req.FillLogContext(rc.Lctx)

		err = svc.LoginPrivate(rc, req.Req)
		if err != nil {
			if !apierrors.IsErrorLikeResult(err) {
				rc.Log.Errorf("auth.Service.LoginPrivate failed: %s", err)
			}
			return LoginPrivateResponse{err}, nil
		}

		return LoginPrivateResponse{nil}, nil

	}
}

type LoginPublicOAuthCallbackRequest struct {
	Req *OAuthCallbackRequest
}

type LoginPublicOAuthCallbackResponse struct {
	err error
}

func makeLoginPublicOAuthCallbackEndpoint(svc Service, log logutil.Log) endpoint.Endpoint {
	return func(ctx context.Context, reqObj interface{}) (resp interface{}, err error) {

		req := reqObj.(LoginPublicOAuthCallbackRequest)

		reqLogger := log
		defer func() {
			if rerr := recover(); rerr != nil {
				reqLogger.Errorf("Panic occured")
				reqLogger.Infof("%s", debug.Stack())
				resp = LoginPublicOAuthCallbackResponse{
					err: errors.New("panic occured"),
				}
				err = nil
			}
		}()

		if err := endpointutil.Error(ctx); err != nil {
			log.Warnf("Error occurred during request context creation: %s", err)
			resp = LoginPublicOAuthCallbackResponse{
				err: err,
			}
			return resp, nil
		}

		rc := endpointutil.RequestContext(ctx).(*request.AnonymousContext)
		reqLogger = rc.Log

		req.Req.FillLogContext(rc.Lctx)

		err = svc.LoginPublicOAuthCallback(rc, req.Req)
		if err != nil {
			if !apierrors.IsErrorLikeResult(err) {
				rc.Log.Errorf("auth.Service.LoginPublicOAuthCallback failed: %s", err)
			}
			return LoginPublicOAuthCallbackResponse{err}, nil
		}

		return LoginPublicOAuthCallbackResponse{nil}, nil

	}
}

type LoginPrivateOAuthCallbackRequest struct {
	Req *OAuthCallbackRequest
}

type LoginPrivateOAuthCallbackResponse struct {
	err error
}

func makeLoginPrivateOAuthCallbackEndpoint(svc Service, log logutil.Log) endpoint.Endpoint {
	return func(ctx context.Context, reqObj interface{}) (resp interface{}, err error) {

		req := reqObj.(LoginPrivateOAuthCallbackRequest)

		reqLogger := log
		defer func() {
			if rerr := recover(); rerr != nil {
				reqLogger.Errorf("Panic occured")
				reqLogger.Infof("%s", debug.Stack())
				resp = LoginPrivateOAuthCallbackResponse{
					err: errors.New("panic occured"),
				}
				err = nil
			}
		}()

		if err := endpointutil.Error(ctx); err != nil {
			log.Warnf("Error occurred during request context creation: %s", err)
			resp = LoginPrivateOAuthCallbackResponse{
				err: err,
			}
			return resp, nil
		}

		rc := endpointutil.RequestContext(ctx).(*request.AuthorizedContext)
		reqLogger = rc.Log

		req.Req.FillLogContext(rc.Lctx)

		err = svc.LoginPrivateOAuthCallback(rc, req.Req)
		if err != nil {
			if !apierrors.IsErrorLikeResult(err) {
				rc.Log.Errorf("auth.Service.LoginPrivateOAuthCallback failed: %s", err)
			}
			return LoginPrivateOAuthCallbackResponse{err}, nil
		}

		return LoginPrivateOAuthCallbackResponse{nil}, nil

	}
}
