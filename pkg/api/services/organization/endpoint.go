// Code generated by genservices. DO NOT EDIT.
package organization

import (
	"context"
	"errors"
	"runtime/debug"

	"github.com/go-kit/kit/endpoint"
	"github.com/golangci/golangci-api/internal/api/endpointutil"
	"github.com/golangci/golangci-api/internal/shared/logutil"
	"github.com/golangci/golangci-api/pkg/api/models"
	"github.com/golangci/golangci-api/pkg/api/request"
)

type UpdateRequest struct {
	ReqOrg  *request.Org
	Payload *UpdatePayload
}

type UpdateResponse struct {
	err error
	*models.Org
}

func makeUpdateEndpoint(svc Service, log logutil.Log) endpoint.Endpoint {
	return func(ctx context.Context, reqObj interface{}) (resp interface{}, err error) {

		req := reqObj.(UpdateRequest)

		reqLogger := log
		defer func() {
			if rerr := recover(); rerr != nil {
				reqLogger.Errorf("Panic occured")
				reqLogger.Infof("%s", debug.Stack())
				resp = UpdateResponse{
					err: errors.New("panic occured"),
				}
				err = nil
			}
		}()

		if err := endpointutil.Error(ctx); err != nil {
			log.Warnf("Error occurred during request context creation: %s", err)
			resp = UpdateResponse{
				err: err,
			}
			return resp, nil
		}

		rc := endpointutil.RequestContext(ctx).(*request.AuthorizedContext)
		reqLogger = rc.Log

		req.ReqOrg.FillLogContext(rc.Lctx)
		req.Payload.FillLogContext(rc.Lctx)

		v, err := svc.Update(rc, req.ReqOrg, req.Payload)
		if err != nil {
			rc.Log.Errorf("organization.Service.Update failed: %s", err)
			return UpdateResponse{err, v}, nil
		}

		return UpdateResponse{nil, v}, nil

	}
}

type GetRequest struct {
	ReqOrg *request.Org
}

type GetResponse struct {
	err error
	*models.Org
}

func makeGetEndpoint(svc Service, log logutil.Log) endpoint.Endpoint {
	return func(ctx context.Context, reqObj interface{}) (resp interface{}, err error) {

		req := reqObj.(GetRequest)

		reqLogger := log
		defer func() {
			if rerr := recover(); rerr != nil {
				reqLogger.Errorf("Panic occured")
				reqLogger.Infof("%s", debug.Stack())
				resp = GetResponse{
					err: errors.New("panic occured"),
				}
				err = nil
			}
		}()

		if err := endpointutil.Error(ctx); err != nil {
			log.Warnf("Error occurred during request context creation: %s", err)
			resp = GetResponse{
				err: err,
			}
			return resp, nil
		}

		rc := endpointutil.RequestContext(ctx).(*request.AuthorizedContext)
		reqLogger = rc.Log

		req.ReqOrg.FillLogContext(rc.Lctx)

		v, err := svc.Get(rc, req.ReqOrg)
		if err != nil {
			rc.Log.Errorf("organization.Service.Get failed: %s", err)
			return GetResponse{err, v}, nil
		}

		return GetResponse{nil, v}, nil

	}
}
