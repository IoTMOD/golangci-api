// Code generated by genservices. DO NOT EDIT.
package repohook

import (
	"context"
	"runtime/debug"

	"github.com/go-kit/kit/endpoint"
	"github.com/golangci/golangci-api/internal/api/apierrors"
	"github.com/golangci/golangci-api/internal/api/endpointutil"
	"github.com/golangci/golangci-api/internal/shared/logutil"
	"github.com/golangci/golangci-api/pkg/api/request"
	"github.com/pkg/errors"
)

type HandleGithubWebhookRequest struct {
	ReqRepo *GithubWebhook
	Body    request.Body
}

type HandleGithubWebhookResponse struct {
	err error
}

func makeHandleGithubWebhookEndpoint(svc Service, log logutil.Log) endpoint.Endpoint {
	return func(ctx context.Context, reqObj interface{}) (resp interface{}, err error) {

		req := reqObj.(HandleGithubWebhookRequest)

		reqLogger := log
		defer func() {
			if rerr := recover(); rerr != nil {
				reqLogger.Errorf("Panic occurred")
				reqLogger.Infof("%s", debug.Stack())
				resp = HandleGithubWebhookResponse{
					err: errors.New("panic occurred"),
				}
				err = nil
			}
		}()

		if err := endpointutil.Error(ctx); err != nil {
			log.Warnf("Error occurred during request context creation: %s", err)
			resp = HandleGithubWebhookResponse{
				err: err,
			}
			return resp, nil
		}

		rc := endpointutil.RequestContext(ctx).(*request.AnonymousContext)
		reqLogger = rc.Log

		req.ReqRepo.FillLogContext(rc.Lctx)
		req.Body.FillLogContext(rc.Lctx)

		err = svc.HandleGithubWebhook(rc, req.ReqRepo, req.Body)
		if err != nil {
			if !apierrors.IsErrorLikeResult(err) {
				rc.Log.Errorf("repohook.Service.HandleGithubWebhook failed: %s", err)
			}
			return HandleGithubWebhookResponse{err}, nil
		}

		return HandleGithubWebhookResponse{nil}, nil

	}
}
