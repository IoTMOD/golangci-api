// Code generated by genservices. DO NOT EDIT.
package repoanalysis

import (
	"context"
	"encoding/json"
	"net/http"

	httptransport "github.com/go-kit/kit/transport/http"
	"github.com/golangci/golangci-api/internal/api/apierrors"
	"github.com/golangci/golangci-api/internal/api/endpointutil"
	"github.com/golangci/golangci-api/internal/api/transportutil"
	"github.com/gorilla/mux"
	"github.com/pkg/errors"
)

func RegisterHandlers(svc Service, r *mux.Router, regCtx *endpointutil.HandlerRegContext) {

	hGetStatus := httptransport.NewServer(
		makeGetStatusEndpoint(svc, regCtx.Log),
		decodeGetStatusRequest,
		encodeGetStatusResponse,
		httptransport.ServerBefore(transportutil.StoreHTTPRequestToContext),
		httptransport.ServerAfter(transportutil.FinalizeSession),

		httptransport.ServerBefore(transportutil.MakeStoreAnonymousRequestContext(*regCtx)),

		httptransport.ServerFinalizer(transportutil.FinalizeRequest),
		httptransport.ServerErrorEncoder(transportutil.EncodeError),
		httptransport.ServerErrorLogger(transportutil.AdaptErrorLogger(regCtx.Log)),
	)
	r.Methods("GET").Path("/v1/repos/{provider}/{owner}/{name}/repoanalyzes").Handler(hGetStatus)

	hGetByAnalysisGUID := httptransport.NewServer(
		makeGetByAnalysisGUIDEndpoint(svc, regCtx.Log),
		decodeGetByAnalysisGUIDRequest,
		encodeGetByAnalysisGUIDResponse,
		httptransport.ServerBefore(transportutil.StoreHTTPRequestToContext),
		httptransport.ServerAfter(transportutil.FinalizeSession),

		httptransport.ServerBefore(transportutil.MakeStoreInternalRequestContext(*regCtx)),

		httptransport.ServerFinalizer(transportutil.FinalizeRequest),
		httptransport.ServerErrorEncoder(transportutil.EncodeError),
		httptransport.ServerErrorLogger(transportutil.AdaptErrorLogger(regCtx.Log)),
	)
	r.Methods("GET").Path("/v1/repos/{provider}/{owner}/{name}/repoanalyzes/{analysisguid}").Handler(hGetByAnalysisGUID)

	hUpdateByAnalysisGUID := httptransport.NewServer(
		makeUpdateByAnalysisGUIDEndpoint(svc, regCtx.Log),
		decodeUpdateByAnalysisGUIDRequest,
		encodeUpdateByAnalysisGUIDResponse,
		httptransport.ServerBefore(transportutil.StoreHTTPRequestToContext),
		httptransport.ServerAfter(transportutil.FinalizeSession),

		httptransport.ServerBefore(transportutil.MakeStoreInternalRequestContext(*regCtx)),

		httptransport.ServerFinalizer(transportutil.FinalizeRequest),
		httptransport.ServerErrorEncoder(transportutil.EncodeError),
		httptransport.ServerErrorLogger(transportutil.AdaptErrorLogger(regCtx.Log)),
	)
	r.Methods("PUT").Path("/v1/repos/{provider}/{owner}/{name}/repoanalyzes/{analysisguid}").Handler(hUpdateByAnalysisGUID)

}

func decodeGetStatusRequest(_ context.Context, r *http.Request) (interface{}, error) {
	var request GetStatusRequest
	if err := transportutil.DecodeRequest(&request, r); err != nil {
		return nil, errors.Wrap(err, "can't decode request")
	}

	return request, nil
}

func encodeGetStatusResponse(ctx context.Context, w http.ResponseWriter, response interface{}) error {
	w.Header().Add("Content-Type", "application/json; charset=UTF-8")
	if err := transportutil.GetContextError(ctx); err != nil {
		wrappedResp := struct {
			Error *transportutil.Error
		}{
			Error: transportutil.MakeError(err),
		}
		w.WriteHeader(wrappedResp.Error.HTTPCode)
		return json.NewEncoder(w).Encode(wrappedResp)
	}

	resp := response.(GetStatusResponse)
	wrappedResp := struct {
		transportutil.ErrorResponse
		GetStatusResponse
	}{
		GetStatusResponse: resp,
	}

	if resp.err != nil {
		if apierrors.IsErrorLikeResult(resp.err) {
			return transportutil.HandleErrorLikeResult(ctx, w, resp.err)
		}

		terr := transportutil.MakeError(resp.err)
		wrappedResp.Error = terr
		w.WriteHeader(terr.HTTPCode)
	}

	return json.NewEncoder(w).Encode(wrappedResp)
}

func decodeGetByAnalysisGUIDRequest(_ context.Context, r *http.Request) (interface{}, error) {
	var request GetByAnalysisGUIDRequest
	if err := transportutil.DecodeRequest(&request, r); err != nil {
		return nil, errors.Wrap(err, "can't decode request")
	}

	return request, nil
}

func encodeGetByAnalysisGUIDResponse(ctx context.Context, w http.ResponseWriter, response interface{}) error {
	w.Header().Add("Content-Type", "application/json; charset=UTF-8")
	if err := transportutil.GetContextError(ctx); err != nil {
		wrappedResp := struct {
			Error *transportutil.Error
		}{
			Error: transportutil.MakeError(err),
		}
		w.WriteHeader(wrappedResp.Error.HTTPCode)
		return json.NewEncoder(w).Encode(wrappedResp)
	}

	resp := response.(GetByAnalysisGUIDResponse)
	wrappedResp := struct {
		transportutil.ErrorResponse
		GetByAnalysisGUIDResponse
	}{
		GetByAnalysisGUIDResponse: resp,
	}

	if resp.err != nil {
		if apierrors.IsErrorLikeResult(resp.err) {
			return transportutil.HandleErrorLikeResult(ctx, w, resp.err)
		}

		terr := transportutil.MakeError(resp.err)
		wrappedResp.Error = terr
		w.WriteHeader(terr.HTTPCode)
	}

	return json.NewEncoder(w).Encode(wrappedResp)
}

func decodeUpdateByAnalysisGUIDRequest(_ context.Context, r *http.Request) (interface{}, error) {
	var request UpdateByAnalysisGUIDRequest
	if err := transportutil.DecodeRequest(&request, r); err != nil {
		return nil, errors.Wrap(err, "can't decode request")
	}

	return request, nil
}

func encodeUpdateByAnalysisGUIDResponse(ctx context.Context, w http.ResponseWriter, response interface{}) error {
	w.Header().Add("Content-Type", "application/json; charset=UTF-8")
	if err := transportutil.GetContextError(ctx); err != nil {
		wrappedResp := struct {
			Error *transportutil.Error
		}{
			Error: transportutil.MakeError(err),
		}
		w.WriteHeader(wrappedResp.Error.HTTPCode)
		return json.NewEncoder(w).Encode(wrappedResp)
	}

	resp := response.(UpdateByAnalysisGUIDResponse)
	wrappedResp := struct {
		transportutil.ErrorResponse
		UpdateByAnalysisGUIDResponse
	}{
		UpdateByAnalysisGUIDResponse: resp,
	}

	if resp.err != nil {
		if apierrors.IsErrorLikeResult(resp.err) {
			return transportutil.HandleErrorLikeResult(ctx, w, resp.err)
		}

		terr := transportutil.MakeError(resp.err)
		wrappedResp.Error = terr
		w.WriteHeader(terr.HTTPCode)
	}

	return json.NewEncoder(w).Encode(wrappedResp)
}
