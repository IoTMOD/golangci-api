// Code generated by genservices. DO NOT EDIT.
package repoanalysis

import (
	"context"
	"runtime/debug"

	"github.com/go-kit/kit/endpoint"
	"github.com/golangci/golangci-api/internal/api/apierrors"
	"github.com/golangci/golangci-api/internal/api/endpointutil"
	"github.com/golangci/golangci-api/internal/shared/logutil"
	"github.com/golangci/golangci-api/pkg/api/models"
	"github.com/golangci/golangci-api/pkg/api/request"
	"github.com/pkg/errors"
)

type GetStatusRequest struct {
	Repo *request.Repo
	Sr   *statusRequest
}

type GetStatusResponse struct {
	err error
	*Status
}

func makeGetStatusEndpoint(svc Service, log logutil.Log) endpoint.Endpoint {
	return func(ctx context.Context, reqObj interface{}) (resp interface{}, err error) {

		req := reqObj.(GetStatusRequest)

		reqLogger := log
		defer func() {
			if rerr := recover(); rerr != nil {
				reqLogger.Errorf("Panic occured")
				reqLogger.Infof("%s", debug.Stack())
				resp = GetStatusResponse{
					err: errors.New("panic occured"),
				}
				err = nil
			}
		}()

		if err := endpointutil.Error(ctx); err != nil {
			log.Warnf("Error occurred during request context creation: %s", err)
			resp = GetStatusResponse{
				err: err,
			}
			return resp, nil
		}

		rc := endpointutil.RequestContext(ctx).(*request.AnonymousContext)
		reqLogger = rc.Log

		req.Repo.FillLogContext(rc.Lctx)
		req.Sr.FillLogContext(rc.Lctx)

		v, err := svc.GetStatus(rc, req.Repo, req.Sr)
		if err != nil {
			rc.Log.Errorf("repoanalysis.Service.GetStatus failed: %s", err)
			return GetStatusResponse{err, v}, nil
		}

		return GetStatusResponse{nil, v}, nil

	}
}

type GetByAnalysisGUIDRequest struct {
	Rac *Context
}

type GetByAnalysisGUIDResponse struct {
	err error
	*models.RepoAnalysis
}

func makeGetByAnalysisGUIDEndpoint(svc Service, log logutil.Log) endpoint.Endpoint {
	return func(ctx context.Context, reqObj interface{}) (resp interface{}, err error) {

		req := reqObj.(GetByAnalysisGUIDRequest)

		reqLogger := log
		defer func() {
			if rerr := recover(); rerr != nil {
				reqLogger.Errorf("Panic occured")
				reqLogger.Infof("%s", debug.Stack())
				resp = GetByAnalysisGUIDResponse{
					err: errors.New("panic occured"),
				}
				err = nil
			}
		}()

		if err := endpointutil.Error(ctx); err != nil {
			log.Warnf("Error occurred during request context creation: %s", err)
			resp = GetByAnalysisGUIDResponse{
				err: err,
			}
			return resp, nil
		}

		rc := endpointutil.RequestContext(ctx).(*request.InternalContext)
		reqLogger = rc.Log

		req.Rac.FillLogContext(rc.Lctx)

		v, err := svc.GetByAnalysisGUID(rc, req.Rac)
		if err != nil {
			rc.Log.Errorf("repoanalysis.Service.GetByAnalysisGUID failed: %s", err)
			return GetByAnalysisGUIDResponse{err, v}, nil
		}

		return GetByAnalysisGUIDResponse{nil, v}, nil

	}
}

type UpdateByAnalysisGUIDRequest struct {
	Rac    *Context
	Update *updateRepoPayload
}

type UpdateByAnalysisGUIDResponse struct {
	err error
}

func makeUpdateByAnalysisGUIDEndpoint(svc Service, log logutil.Log) endpoint.Endpoint {
	return func(ctx context.Context, reqObj interface{}) (resp interface{}, err error) {

		req := reqObj.(UpdateByAnalysisGUIDRequest)

		reqLogger := log
		defer func() {
			if rerr := recover(); rerr != nil {
				reqLogger.Errorf("Panic occured")
				reqLogger.Infof("%s", debug.Stack())
				resp = UpdateByAnalysisGUIDResponse{
					err: errors.New("panic occured"),
				}
				err = nil
			}
		}()

		if err := endpointutil.Error(ctx); err != nil {
			log.Warnf("Error occurred during request context creation: %s", err)
			resp = UpdateByAnalysisGUIDResponse{
				err: err,
			}
			return resp, nil
		}

		rc := endpointutil.RequestContext(ctx).(*request.InternalContext)
		reqLogger = rc.Log

		req.Rac.FillLogContext(rc.Lctx)
		req.Update.FillLogContext(rc.Lctx)

		err = svc.UpdateByAnalysisGUID(rc, req.Rac, req.Update)
		if err != nil {
			if !apierrors.IsErrorLikeResult(err) {
				rc.Log.Errorf("repoanalysis.Service.UpdateByAnalysisGUID failed: %s", err)
			}
			return UpdateByAnalysisGUIDResponse{err}, nil
		}

		return UpdateByAnalysisGUIDResponse{nil}, nil

	}
}
