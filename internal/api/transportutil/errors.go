package transportutil

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/golangci/golangci-api/internal/api/apierrors"
	"github.com/golangci/golangci-api/internal/shared/providers/provider"
	"github.com/pkg/errors"
)

type Error struct {
	// for autogenerated code
	HTTPCode int `json:"-"`

	// for js
	Code string `json:"code,omitempty"`

	// for logging
	debug string

	// for user
	Message string `json:"message,omitempty"`
}

type ErrorResponse struct {
	Error *Error `json:"error,omitempty"`
}

func makeError(code int, e error) *Error {
	retErr := Error{
		HTTPCode: code,
		debug:    e.Error(),
	}

	if le, ok := e.(apierrors.LocalizedError); ok {
		retErr.Message = le.GetMessage()
	}

	if ec, ok := e.(apierrors.ErrorWithCode); ok {
		retErr.Code = ec.GetCode()
	}

	return &retErr
}

func MakeError(e error) *Error {
	srcErr := errors.Cause(e)

	switch srcErr {
	case apierrors.ErrNotFound:
		return makeError(http.StatusNotFound, e)
	case apierrors.ErrBadRequest:
		return makeError(http.StatusBadRequest, e)
	case apierrors.ErrNotAuthorized, provider.ErrUnauthorized:
		return makeError(http.StatusForbidden, e)
	case apierrors.ErrInternal:
		return makeError(http.StatusInternalServerError, errors.New("internal error"))
	}

	switch err := srcErr.(type) {
	case *apierrors.NotAcceptableError:
		return makeError(http.StatusNotAcceptable, err)
	case *apierrors.RaceConditionError:
		return makeError(http.StatusConflict, err)
	}

	return makeError(http.StatusInternalServerError, errors.New("internal error"))
}

func HandleErrorLikeResult(ctx context.Context, w http.ResponseWriter, e error) error {
	writeJSONHeader := func(code int) {
		w.Header().Add("Content-Type", "application/json; charset=UTF-8")
		w.WriteHeader(code)
	}

	e = errors.Cause(e)

	switch err := e.(type) {
	case *apierrors.RedirectError:
		r := getHTTPRequestFromContext(ctx)
		code := http.StatusPermanentRedirect
		if err.Temporary {
			code = http.StatusTemporaryRedirect
		}
		http.Redirect(w, r, err.URL, code)
		return nil
	case *apierrors.ContinueError:
		writeJSONHeader(http.StatusAccepted)
		return errors.Wrapf(json.NewEncoder(w).Encode(err), "while encoding '%s'", err.URL)
	case *apierrors.PendingError:
		writeJSONHeader(http.StatusAccepted)
		return nil
	}

	return fmt.Errorf("unknown error like result type: %#v (%T)", e, e)
}
