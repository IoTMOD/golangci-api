package models

import (
	"fmt"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set GithubRepoQuerySet

// GithubRepoQuerySet is an queryset type for GithubRepo
type GithubRepoQuerySet struct {
	db *gorm.DB
}

// NewGithubRepoQuerySet constructs new GithubRepoQuerySet
func NewGithubRepoQuerySet(db *gorm.DB) GithubRepoQuerySet {
	return GithubRepoQuerySet{
		db: db.Model(&GithubRepo{}),
	}
}

func (qs GithubRepoQuerySet) w(db *gorm.DB) GithubRepoQuerySet {
	return NewGithubRepoQuerySet(db)
}

// All is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) All(ret *[]GithubRepo) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Create is an autogenerated method
// nolint: dupl
func (o *GithubRepo) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) CreatedAtEq(createdAt time.Time) GithubRepoQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) CreatedAtGt(createdAt time.Time) GithubRepoQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) CreatedAtGte(createdAt time.Time) GithubRepoQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) CreatedAtLt(createdAt time.Time) GithubRepoQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) CreatedAtLte(createdAt time.Time) GithubRepoQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) CreatedAtNe(createdAt time.Time) GithubRepoQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// Delete is an autogenerated method
// nolint: dupl
func (o *GithubRepo) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) Delete() error {
	return qs.db.Delete(GithubRepo{}).Error
}

// DeletedAtEq is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) DeletedAtEq(deletedAt time.Time) GithubRepoQuerySet {
	return qs.w(qs.db.Where("deleted_at = ?", deletedAt))
}

// DeletedAtGt is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) DeletedAtGt(deletedAt time.Time) GithubRepoQuerySet {
	return qs.w(qs.db.Where("deleted_at > ?", deletedAt))
}

// DeletedAtGte is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) DeletedAtGte(deletedAt time.Time) GithubRepoQuerySet {
	return qs.w(qs.db.Where("deleted_at >= ?", deletedAt))
}

// DeletedAtIsNotNull is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) DeletedAtIsNotNull() GithubRepoQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NOT NULL"))
}

// DeletedAtIsNull is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) DeletedAtIsNull() GithubRepoQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NULL"))
}

// DeletedAtLt is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) DeletedAtLt(deletedAt time.Time) GithubRepoQuerySet {
	return qs.w(qs.db.Where("deleted_at < ?", deletedAt))
}

// DeletedAtLte is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) DeletedAtLte(deletedAt time.Time) GithubRepoQuerySet {
	return qs.w(qs.db.Where("deleted_at <= ?", deletedAt))
}

// DeletedAtNe is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) DeletedAtNe(deletedAt time.Time) GithubRepoQuerySet {
	return qs.w(qs.db.Where("deleted_at != ?", deletedAt))
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) GetUpdater() GithubRepoUpdater {
	return NewGithubRepoUpdater(qs.db)
}

// GithubHookIDEq is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) GithubHookIDEq(githubHookID int) GithubRepoQuerySet {
	return qs.w(qs.db.Where("github_hook_id = ?", githubHookID))
}

// GithubHookIDGt is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) GithubHookIDGt(githubHookID int) GithubRepoQuerySet {
	return qs.w(qs.db.Where("github_hook_id > ?", githubHookID))
}

// GithubHookIDGte is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) GithubHookIDGte(githubHookID int) GithubRepoQuerySet {
	return qs.w(qs.db.Where("github_hook_id >= ?", githubHookID))
}

// GithubHookIDIn is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) GithubHookIDIn(githubHookID int, githubHookIDRest ...int) GithubRepoQuerySet {
	iArgs := []interface{}{githubHookID}
	for _, arg := range githubHookIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("github_hook_id IN (?)", iArgs))
}

// GithubHookIDLt is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) GithubHookIDLt(githubHookID int) GithubRepoQuerySet {
	return qs.w(qs.db.Where("github_hook_id < ?", githubHookID))
}

// GithubHookIDLte is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) GithubHookIDLte(githubHookID int) GithubRepoQuerySet {
	return qs.w(qs.db.Where("github_hook_id <= ?", githubHookID))
}

// GithubHookIDNe is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) GithubHookIDNe(githubHookID int) GithubRepoQuerySet {
	return qs.w(qs.db.Where("github_hook_id != ?", githubHookID))
}

// GithubHookIDNotIn is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) GithubHookIDNotIn(githubHookID int, githubHookIDRest ...int) GithubRepoQuerySet {
	iArgs := []interface{}{githubHookID}
	for _, arg := range githubHookIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("github_hook_id NOT IN (?)", iArgs))
}

// HookIDEq is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) HookIDEq(hookID string) GithubRepoQuerySet {
	return qs.w(qs.db.Where("hook_id = ?", hookID))
}

// HookIDIn is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) HookIDIn(hookID string, hookIDRest ...string) GithubRepoQuerySet {
	iArgs := []interface{}{hookID}
	for _, arg := range hookIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("hook_id IN (?)", iArgs))
}

// HookIDNe is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) HookIDNe(hookID string) GithubRepoQuerySet {
	return qs.w(qs.db.Where("hook_id != ?", hookID))
}

// HookIDNotIn is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) HookIDNotIn(hookID string, hookIDRest ...string) GithubRepoQuerySet {
	iArgs := []interface{}{hookID}
	for _, arg := range hookIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("hook_id NOT IN (?)", iArgs))
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) IDEq(ID uint) GithubRepoQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) IDGt(ID uint) GithubRepoQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) IDGte(ID uint) GithubRepoQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) IDIn(ID uint, IDRest ...uint) GithubRepoQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id IN (?)", iArgs))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) IDLt(ID uint) GithubRepoQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) IDLte(ID uint) GithubRepoQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) IDNe(ID uint) GithubRepoQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) IDNotIn(ID uint, IDRest ...uint) GithubRepoQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", iArgs))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) Limit(limit int) GithubRepoQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// NameEq is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) NameEq(name string) GithubRepoQuerySet {
	return qs.w(qs.db.Where("name = ?", name))
}

// NameIn is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) NameIn(name string, nameRest ...string) GithubRepoQuerySet {
	iArgs := []interface{}{name}
	for _, arg := range nameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("name IN (?)", iArgs))
}

// NameNe is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) NameNe(name string) GithubRepoQuerySet {
	return qs.w(qs.db.Where("name != ?", name))
}

// NameNotIn is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) NameNotIn(name string, nameRest ...string) GithubRepoQuerySet {
	iArgs := []interface{}{name}
	for _, arg := range nameRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("name NOT IN (?)", iArgs))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs GithubRepoQuerySet) One(ret *GithubRepo) error {
	return qs.db.First(ret).Error
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) OrderAscByCreatedAt() GithubRepoQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByDeletedAt is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) OrderAscByDeletedAt() GithubRepoQuerySet {
	return qs.w(qs.db.Order("deleted_at ASC"))
}

// OrderAscByGithubHookID is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) OrderAscByGithubHookID() GithubRepoQuerySet {
	return qs.w(qs.db.Order("github_hook_id ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) OrderAscByID() GithubRepoQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) OrderAscByUpdatedAt() GithubRepoQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderAscByUserID is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) OrderAscByUserID() GithubRepoQuerySet {
	return qs.w(qs.db.Order("user_id ASC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) OrderDescByCreatedAt() GithubRepoQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByDeletedAt is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) OrderDescByDeletedAt() GithubRepoQuerySet {
	return qs.w(qs.db.Order("deleted_at DESC"))
}

// OrderDescByGithubHookID is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) OrderDescByGithubHookID() GithubRepoQuerySet {
	return qs.w(qs.db.Order("github_hook_id DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) OrderDescByID() GithubRepoQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) OrderDescByUpdatedAt() GithubRepoQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// OrderDescByUserID is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) OrderDescByUserID() GithubRepoQuerySet {
	return qs.w(qs.db.Order("user_id DESC"))
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u GithubRepoUpdater) SetCreatedAt(createdAt time.Time) GithubRepoUpdater {
	u.fields[string(GithubRepoDBSchema.CreatedAt)] = createdAt
	return u
}

// SetGithubHookID is an autogenerated method
// nolint: dupl
func (u GithubRepoUpdater) SetGithubHookID(githubHookID int) GithubRepoUpdater {
	u.fields[string(GithubRepoDBSchema.GithubHookID)] = githubHookID
	return u
}

// SetHookID is an autogenerated method
// nolint: dupl
func (u GithubRepoUpdater) SetHookID(hookID string) GithubRepoUpdater {
	u.fields[string(GithubRepoDBSchema.HookID)] = hookID
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u GithubRepoUpdater) SetID(ID uint) GithubRepoUpdater {
	u.fields[string(GithubRepoDBSchema.ID)] = ID
	return u
}

// SetName is an autogenerated method
// nolint: dupl
func (u GithubRepoUpdater) SetName(name string) GithubRepoUpdater {
	u.fields[string(GithubRepoDBSchema.Name)] = name
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u GithubRepoUpdater) SetUpdatedAt(updatedAt time.Time) GithubRepoUpdater {
	u.fields[string(GithubRepoDBSchema.UpdatedAt)] = updatedAt
	return u
}

// SetUserID is an autogenerated method
// nolint: dupl
func (u GithubRepoUpdater) SetUserID(userID uint) GithubRepoUpdater {
	u.fields[string(GithubRepoDBSchema.UserID)] = userID
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u GithubRepoUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) UpdatedAtEq(updatedAt time.Time) GithubRepoQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) UpdatedAtGt(updatedAt time.Time) GithubRepoQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) UpdatedAtGte(updatedAt time.Time) GithubRepoQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) UpdatedAtLt(updatedAt time.Time) GithubRepoQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) UpdatedAtLte(updatedAt time.Time) GithubRepoQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) UpdatedAtNe(updatedAt time.Time) GithubRepoQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// UserIDEq is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) UserIDEq(userID uint) GithubRepoQuerySet {
	return qs.w(qs.db.Where("user_id = ?", userID))
}

// UserIDGt is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) UserIDGt(userID uint) GithubRepoQuerySet {
	return qs.w(qs.db.Where("user_id > ?", userID))
}

// UserIDGte is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) UserIDGte(userID uint) GithubRepoQuerySet {
	return qs.w(qs.db.Where("user_id >= ?", userID))
}

// UserIDIn is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) UserIDIn(userID uint, userIDRest ...uint) GithubRepoQuerySet {
	iArgs := []interface{}{userID}
	for _, arg := range userIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("user_id IN (?)", iArgs))
}

// UserIDLt is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) UserIDLt(userID uint) GithubRepoQuerySet {
	return qs.w(qs.db.Where("user_id < ?", userID))
}

// UserIDLte is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) UserIDLte(userID uint) GithubRepoQuerySet {
	return qs.w(qs.db.Where("user_id <= ?", userID))
}

// UserIDNe is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) UserIDNe(userID uint) GithubRepoQuerySet {
	return qs.w(qs.db.Where("user_id != ?", userID))
}

// UserIDNotIn is an autogenerated method
// nolint: dupl
func (qs GithubRepoQuerySet) UserIDNotIn(userID uint, userIDRest ...uint) GithubRepoQuerySet {
	iArgs := []interface{}{userID}
	for _, arg := range userIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("user_id NOT IN (?)", iArgs))
}

// ===== END of query set GithubRepoQuerySet

// ===== BEGIN of GithubRepo modifiers

type githubRepoDBSchemaField string

// GithubRepoDBSchema stores db field names of GithubRepo
var GithubRepoDBSchema = struct {
	ID           githubRepoDBSchemaField
	CreatedAt    githubRepoDBSchemaField
	UpdatedAt    githubRepoDBSchemaField
	DeletedAt    githubRepoDBSchemaField
	UserID       githubRepoDBSchemaField
	Name         githubRepoDBSchemaField
	HookID       githubRepoDBSchemaField
	GithubHookID githubRepoDBSchemaField
}{

	ID:           githubRepoDBSchemaField("id"),
	CreatedAt:    githubRepoDBSchemaField("created_at"),
	UpdatedAt:    githubRepoDBSchemaField("updated_at"),
	DeletedAt:    githubRepoDBSchemaField("deleted_at"),
	UserID:       githubRepoDBSchemaField("user_id"),
	Name:         githubRepoDBSchemaField("name"),
	HookID:       githubRepoDBSchemaField("hook_id"),
	GithubHookID: githubRepoDBSchemaField("github_hook_id"),
}

// Update updates GithubRepo fields by primary key
func (o *GithubRepo) Update(db *gorm.DB, fields ...githubRepoDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":             o.ID,
		"created_at":     o.CreatedAt,
		"updated_at":     o.UpdatedAt,
		"deleted_at":     o.DeletedAt,
		"user_id":        o.UserID,
		"name":           o.Name,
		"hook_id":        o.HookID,
		"github_hook_id": o.GithubHookID,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := string(f)
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update GithubRepo %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// GithubRepoUpdater is an GithubRepo updates manager
type GithubRepoUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewGithubRepoUpdater creates new GithubRepo updater
func NewGithubRepoUpdater(db *gorm.DB) GithubRepoUpdater {
	return GithubRepoUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&GithubRepo{}),
	}
}

// ===== END of GithubRepo modifiers

// ===== END of all query sets
