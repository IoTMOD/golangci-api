package models

import (
	"fmt"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set GithubAnalysisQuerySet

// GithubAnalysisQuerySet is an queryset type for GithubAnalysis
type GithubAnalysisQuerySet struct {
	db *gorm.DB
}

// NewGithubAnalysisQuerySet constructs new GithubAnalysisQuerySet
func NewGithubAnalysisQuerySet(db *gorm.DB) GithubAnalysisQuerySet {
	return GithubAnalysisQuerySet{
		db: db.Model(&GithubAnalysis{}),
	}
}

func (qs GithubAnalysisQuerySet) w(db *gorm.DB) GithubAnalysisQuerySet {
	return NewGithubAnalysisQuerySet(db)
}

// All is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) All(ret *[]GithubAnalysis) error {
	return qs.db.Find(ret).Error
}

// CommitSHAEq is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) CommitSHAEq(commitSHA string) GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("commit_sha = ?", commitSHA))
}

// CommitSHAIn is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) CommitSHAIn(commitSHA string, commitSHARest ...string) GithubAnalysisQuerySet {
	iArgs := []interface{}{commitSHA}
	for _, arg := range commitSHARest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("commit_sha IN (?)", iArgs))
}

// CommitSHANe is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) CommitSHANe(commitSHA string) GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("commit_sha != ?", commitSHA))
}

// CommitSHANotIn is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) CommitSHANotIn(commitSHA string, commitSHARest ...string) GithubAnalysisQuerySet {
	iArgs := []interface{}{commitSHA}
	for _, arg := range commitSHARest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("commit_sha NOT IN (?)", iArgs))
}

// Count is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Create is an autogenerated method
// nolint: dupl
func (o *GithubAnalysis) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) CreatedAtEq(createdAt time.Time) GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) CreatedAtGt(createdAt time.Time) GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) CreatedAtGte(createdAt time.Time) GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) CreatedAtLt(createdAt time.Time) GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) CreatedAtLte(createdAt time.Time) GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) CreatedAtNe(createdAt time.Time) GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// Delete is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) Delete() error {
	return qs.db.Delete(GithubAnalysis{}).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *GithubAnalysis) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// DeletedAtEq is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) DeletedAtEq(deletedAt time.Time) GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("deleted_at = ?", deletedAt))
}

// DeletedAtGt is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) DeletedAtGt(deletedAt time.Time) GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("deleted_at > ?", deletedAt))
}

// DeletedAtGte is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) DeletedAtGte(deletedAt time.Time) GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("deleted_at >= ?", deletedAt))
}

// DeletedAtIsNotNull is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) DeletedAtIsNotNull() GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NOT NULL"))
}

// DeletedAtIsNull is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) DeletedAtIsNull() GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NULL"))
}

// DeletedAtLt is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) DeletedAtLt(deletedAt time.Time) GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("deleted_at < ?", deletedAt))
}

// DeletedAtLte is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) DeletedAtLte(deletedAt time.Time) GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("deleted_at <= ?", deletedAt))
}

// DeletedAtNe is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) DeletedAtNe(deletedAt time.Time) GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("deleted_at != ?", deletedAt))
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) GetUpdater() GithubAnalysisUpdater {
	return NewGithubAnalysisUpdater(qs.db)
}

// GithubDeliveryGUIDEq is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) GithubDeliveryGUIDEq(githubDeliveryGUID string) GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("github_delivery_guid = ?", githubDeliveryGUID))
}

// GithubDeliveryGUIDIn is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) GithubDeliveryGUIDIn(githubDeliveryGUID string, githubDeliveryGUIDRest ...string) GithubAnalysisQuerySet {
	iArgs := []interface{}{githubDeliveryGUID}
	for _, arg := range githubDeliveryGUIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("github_delivery_guid IN (?)", iArgs))
}

// GithubDeliveryGUIDNe is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) GithubDeliveryGUIDNe(githubDeliveryGUID string) GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("github_delivery_guid != ?", githubDeliveryGUID))
}

// GithubDeliveryGUIDNotIn is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) GithubDeliveryGUIDNotIn(githubDeliveryGUID string, githubDeliveryGUIDRest ...string) GithubAnalysisQuerySet {
	iArgs := []interface{}{githubDeliveryGUID}
	for _, arg := range githubDeliveryGUIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("github_delivery_guid NOT IN (?)", iArgs))
}

// GithubPullRequestNumberEq is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) GithubPullRequestNumberEq(githubPullRequestNumber int) GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("github_pull_request_number = ?", githubPullRequestNumber))
}

// GithubPullRequestNumberGt is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) GithubPullRequestNumberGt(githubPullRequestNumber int) GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("github_pull_request_number > ?", githubPullRequestNumber))
}

// GithubPullRequestNumberGte is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) GithubPullRequestNumberGte(githubPullRequestNumber int) GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("github_pull_request_number >= ?", githubPullRequestNumber))
}

// GithubPullRequestNumberIn is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) GithubPullRequestNumberIn(githubPullRequestNumber int, githubPullRequestNumberRest ...int) GithubAnalysisQuerySet {
	iArgs := []interface{}{githubPullRequestNumber}
	for _, arg := range githubPullRequestNumberRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("github_pull_request_number IN (?)", iArgs))
}

// GithubPullRequestNumberLt is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) GithubPullRequestNumberLt(githubPullRequestNumber int) GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("github_pull_request_number < ?", githubPullRequestNumber))
}

// GithubPullRequestNumberLte is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) GithubPullRequestNumberLte(githubPullRequestNumber int) GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("github_pull_request_number <= ?", githubPullRequestNumber))
}

// GithubPullRequestNumberNe is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) GithubPullRequestNumberNe(githubPullRequestNumber int) GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("github_pull_request_number != ?", githubPullRequestNumber))
}

// GithubPullRequestNumberNotIn is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) GithubPullRequestNumberNotIn(githubPullRequestNumber int, githubPullRequestNumberRest ...int) GithubAnalysisQuerySet {
	iArgs := []interface{}{githubPullRequestNumber}
	for _, arg := range githubPullRequestNumberRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("github_pull_request_number NOT IN (?)", iArgs))
}

// GithubRepoIDEq is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) GithubRepoIDEq(githubRepoID uint) GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("github_repo_id = ?", githubRepoID))
}

// GithubRepoIDGt is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) GithubRepoIDGt(githubRepoID uint) GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("github_repo_id > ?", githubRepoID))
}

// GithubRepoIDGte is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) GithubRepoIDGte(githubRepoID uint) GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("github_repo_id >= ?", githubRepoID))
}

// GithubRepoIDIn is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) GithubRepoIDIn(githubRepoID uint, githubRepoIDRest ...uint) GithubAnalysisQuerySet {
	iArgs := []interface{}{githubRepoID}
	for _, arg := range githubRepoIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("github_repo_id IN (?)", iArgs))
}

// GithubRepoIDLt is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) GithubRepoIDLt(githubRepoID uint) GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("github_repo_id < ?", githubRepoID))
}

// GithubRepoIDLte is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) GithubRepoIDLte(githubRepoID uint) GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("github_repo_id <= ?", githubRepoID))
}

// GithubRepoIDNe is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) GithubRepoIDNe(githubRepoID uint) GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("github_repo_id != ?", githubRepoID))
}

// GithubRepoIDNotIn is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) GithubRepoIDNotIn(githubRepoID uint, githubRepoIDRest ...uint) GithubAnalysisQuerySet {
	iArgs := []interface{}{githubRepoID}
	for _, arg := range githubRepoIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("github_repo_id NOT IN (?)", iArgs))
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) IDEq(ID uint) GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) IDGt(ID uint) GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) IDGte(ID uint) GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) IDIn(ID uint, IDRest ...uint) GithubAnalysisQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id IN (?)", iArgs))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) IDLt(ID uint) GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) IDLte(ID uint) GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) IDNe(ID uint) GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) IDNotIn(ID uint, IDRest ...uint) GithubAnalysisQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", iArgs))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) Limit(limit int) GithubAnalysisQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs GithubAnalysisQuerySet) One(ret *GithubAnalysis) error {
	return qs.db.First(ret).Error
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) OrderAscByCreatedAt() GithubAnalysisQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByDeletedAt is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) OrderAscByDeletedAt() GithubAnalysisQuerySet {
	return qs.w(qs.db.Order("deleted_at ASC"))
}

// OrderAscByGithubPullRequestNumber is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) OrderAscByGithubPullRequestNumber() GithubAnalysisQuerySet {
	return qs.w(qs.db.Order("github_pull_request_number ASC"))
}

// OrderAscByGithubRepoID is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) OrderAscByGithubRepoID() GithubAnalysisQuerySet {
	return qs.w(qs.db.Order("github_repo_id ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) OrderAscByID() GithubAnalysisQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByReportedIssuesCount is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) OrderAscByReportedIssuesCount() GithubAnalysisQuerySet {
	return qs.w(qs.db.Order("reported_issues_count ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) OrderAscByUpdatedAt() GithubAnalysisQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) OrderDescByCreatedAt() GithubAnalysisQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByDeletedAt is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) OrderDescByDeletedAt() GithubAnalysisQuerySet {
	return qs.w(qs.db.Order("deleted_at DESC"))
}

// OrderDescByGithubPullRequestNumber is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) OrderDescByGithubPullRequestNumber() GithubAnalysisQuerySet {
	return qs.w(qs.db.Order("github_pull_request_number DESC"))
}

// OrderDescByGithubRepoID is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) OrderDescByGithubRepoID() GithubAnalysisQuerySet {
	return qs.w(qs.db.Order("github_repo_id DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) OrderDescByID() GithubAnalysisQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByReportedIssuesCount is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) OrderDescByReportedIssuesCount() GithubAnalysisQuerySet {
	return qs.w(qs.db.Order("reported_issues_count DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) OrderDescByUpdatedAt() GithubAnalysisQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// PreloadGithubRepo is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) PreloadGithubRepo() GithubAnalysisQuerySet {
	return qs.w(qs.db.Preload("GithubRepo"))
}

// ReportedIssuesCountEq is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) ReportedIssuesCountEq(reportedIssuesCount int) GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("reported_issues_count = ?", reportedIssuesCount))
}

// ReportedIssuesCountGt is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) ReportedIssuesCountGt(reportedIssuesCount int) GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("reported_issues_count > ?", reportedIssuesCount))
}

// ReportedIssuesCountGte is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) ReportedIssuesCountGte(reportedIssuesCount int) GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("reported_issues_count >= ?", reportedIssuesCount))
}

// ReportedIssuesCountIn is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) ReportedIssuesCountIn(reportedIssuesCount int, reportedIssuesCountRest ...int) GithubAnalysisQuerySet {
	iArgs := []interface{}{reportedIssuesCount}
	for _, arg := range reportedIssuesCountRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("reported_issues_count IN (?)", iArgs))
}

// ReportedIssuesCountLt is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) ReportedIssuesCountLt(reportedIssuesCount int) GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("reported_issues_count < ?", reportedIssuesCount))
}

// ReportedIssuesCountLte is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) ReportedIssuesCountLte(reportedIssuesCount int) GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("reported_issues_count <= ?", reportedIssuesCount))
}

// ReportedIssuesCountNe is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) ReportedIssuesCountNe(reportedIssuesCount int) GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("reported_issues_count != ?", reportedIssuesCount))
}

// ReportedIssuesCountNotIn is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) ReportedIssuesCountNotIn(reportedIssuesCount int, reportedIssuesCountRest ...int) GithubAnalysisQuerySet {
	iArgs := []interface{}{reportedIssuesCount}
	for _, arg := range reportedIssuesCountRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("reported_issues_count NOT IN (?)", iArgs))
}

// SetCommitSHA is an autogenerated method
// nolint: dupl
func (u GithubAnalysisUpdater) SetCommitSHA(commitSHA string) GithubAnalysisUpdater {
	u.fields[string(GithubAnalysisDBSchema.CommitSHA)] = commitSHA
	return u
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u GithubAnalysisUpdater) SetCreatedAt(createdAt time.Time) GithubAnalysisUpdater {
	u.fields[string(GithubAnalysisDBSchema.CreatedAt)] = createdAt
	return u
}

// SetGithubDeliveryGUID is an autogenerated method
// nolint: dupl
func (u GithubAnalysisUpdater) SetGithubDeliveryGUID(githubDeliveryGUID string) GithubAnalysisUpdater {
	u.fields[string(GithubAnalysisDBSchema.GithubDeliveryGUID)] = githubDeliveryGUID
	return u
}

// SetGithubPullRequestNumber is an autogenerated method
// nolint: dupl
func (u GithubAnalysisUpdater) SetGithubPullRequestNumber(githubPullRequestNumber int) GithubAnalysisUpdater {
	u.fields[string(GithubAnalysisDBSchema.GithubPullRequestNumber)] = githubPullRequestNumber
	return u
}

// SetGithubRepo is an autogenerated method
// nolint: dupl
func (u GithubAnalysisUpdater) SetGithubRepo(githubRepo GithubRepo) GithubAnalysisUpdater {
	u.fields[string(GithubAnalysisDBSchema.GithubRepo)] = githubRepo
	return u
}

// SetGithubRepoID is an autogenerated method
// nolint: dupl
func (u GithubAnalysisUpdater) SetGithubRepoID(githubRepoID uint) GithubAnalysisUpdater {
	u.fields[string(GithubAnalysisDBSchema.GithubRepoID)] = githubRepoID
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u GithubAnalysisUpdater) SetID(ID uint) GithubAnalysisUpdater {
	u.fields[string(GithubAnalysisDBSchema.ID)] = ID
	return u
}

// SetReportedIssuesCount is an autogenerated method
// nolint: dupl
func (u GithubAnalysisUpdater) SetReportedIssuesCount(reportedIssuesCount int) GithubAnalysisUpdater {
	u.fields[string(GithubAnalysisDBSchema.ReportedIssuesCount)] = reportedIssuesCount
	return u
}

// SetStatus is an autogenerated method
// nolint: dupl
func (u GithubAnalysisUpdater) SetStatus(status string) GithubAnalysisUpdater {
	u.fields[string(GithubAnalysisDBSchema.Status)] = status
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u GithubAnalysisUpdater) SetUpdatedAt(updatedAt time.Time) GithubAnalysisUpdater {
	u.fields[string(GithubAnalysisDBSchema.UpdatedAt)] = updatedAt
	return u
}

// StatusEq is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) StatusEq(status string) GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("status = ?", status))
}

// StatusIn is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) StatusIn(status string, statusRest ...string) GithubAnalysisQuerySet {
	iArgs := []interface{}{status}
	for _, arg := range statusRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("status IN (?)", iArgs))
}

// StatusNe is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) StatusNe(status string) GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("status != ?", status))
}

// StatusNotIn is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) StatusNotIn(status string, statusRest ...string) GithubAnalysisQuerySet {
	iArgs := []interface{}{status}
	for _, arg := range statusRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("status NOT IN (?)", iArgs))
}

// Update is an autogenerated method
// nolint: dupl
func (u GithubAnalysisUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) UpdatedAtEq(updatedAt time.Time) GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) UpdatedAtGt(updatedAt time.Time) GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) UpdatedAtGte(updatedAt time.Time) GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) UpdatedAtLt(updatedAt time.Time) GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) UpdatedAtLte(updatedAt time.Time) GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs GithubAnalysisQuerySet) UpdatedAtNe(updatedAt time.Time) GithubAnalysisQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// ===== END of query set GithubAnalysisQuerySet

// ===== BEGIN of GithubAnalysis modifiers

type githubAnalysisDBSchemaField string

// GithubAnalysisDBSchema stores db field names of GithubAnalysis
var GithubAnalysisDBSchema = struct {
	ID                      githubAnalysisDBSchemaField
	CreatedAt               githubAnalysisDBSchemaField
	UpdatedAt               githubAnalysisDBSchemaField
	DeletedAt               githubAnalysisDBSchemaField
	GithubRepo              githubAnalysisDBSchemaField
	GithubRepoID            githubAnalysisDBSchemaField
	GithubPullRequestNumber githubAnalysisDBSchemaField
	GithubDeliveryGUID      githubAnalysisDBSchemaField
	CommitSHA               githubAnalysisDBSchemaField
	Status                  githubAnalysisDBSchemaField
	ReportedIssuesCount     githubAnalysisDBSchemaField
}{

	ID:                      githubAnalysisDBSchemaField("id"),
	CreatedAt:               githubAnalysisDBSchemaField("created_at"),
	UpdatedAt:               githubAnalysisDBSchemaField("updated_at"),
	DeletedAt:               githubAnalysisDBSchemaField("deleted_at"),
	GithubRepo:              githubAnalysisDBSchemaField("github_repo"),
	GithubRepoID:            githubAnalysisDBSchemaField("github_repo_id"),
	GithubPullRequestNumber: githubAnalysisDBSchemaField("github_pull_request_number"),
	GithubDeliveryGUID:      githubAnalysisDBSchemaField("github_delivery_guid"),
	CommitSHA:               githubAnalysisDBSchemaField("commit_sha"),
	Status:                  githubAnalysisDBSchemaField("status"),
	ReportedIssuesCount:     githubAnalysisDBSchemaField("reported_issues_count"),
}

// Update updates GithubAnalysis fields by primary key
func (o *GithubAnalysis) Update(db *gorm.DB, fields ...githubAnalysisDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":                         o.ID,
		"created_at":                 o.CreatedAt,
		"updated_at":                 o.UpdatedAt,
		"deleted_at":                 o.DeletedAt,
		"github_repo":                o.GithubRepo,
		"github_repo_id":             o.GithubRepoID,
		"github_pull_request_number": o.GithubPullRequestNumber,
		"github_delivery_guid":       o.GithubDeliveryGUID,
		"commit_sha":                 o.CommitSHA,
		"status":                     o.Status,
		"reported_issues_count":      o.ReportedIssuesCount,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := string(f)
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update GithubAnalysis %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// GithubAnalysisUpdater is an GithubAnalysis updates manager
type GithubAnalysisUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewGithubAnalysisUpdater creates new GithubAnalysis updater
func NewGithubAnalysisUpdater(db *gorm.DB) GithubAnalysisUpdater {
	return GithubAnalysisUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&GithubAnalysis{}),
	}
}

// ===== END of GithubAnalysis modifiers

// ===== END of all query sets
