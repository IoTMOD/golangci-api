package models

import (
	"fmt"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set GithubAuthQuerySet

// GithubAuthQuerySet is an queryset type for GithubAuth
type GithubAuthQuerySet struct {
	db *gorm.DB
}

// NewGithubAuthQuerySet constructs new GithubAuthQuerySet
func NewGithubAuthQuerySet(db *gorm.DB) GithubAuthQuerySet {
	return GithubAuthQuerySet{
		db: db.Model(&GithubAuth{}),
	}
}

func (qs GithubAuthQuerySet) w(db *gorm.DB) GithubAuthQuerySet {
	return NewGithubAuthQuerySet(db)
}

// AccessTokenEq is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) AccessTokenEq(accessToken string) GithubAuthQuerySet {
	return qs.w(qs.db.Where("access_token = ?", accessToken))
}

// AccessTokenIn is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) AccessTokenIn(accessToken string, accessTokenRest ...string) GithubAuthQuerySet {
	iArgs := []interface{}{accessToken}
	for _, arg := range accessTokenRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("access_token IN (?)", iArgs))
}

// AccessTokenNe is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) AccessTokenNe(accessToken string) GithubAuthQuerySet {
	return qs.w(qs.db.Where("access_token != ?", accessToken))
}

// AccessTokenNotIn is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) AccessTokenNotIn(accessToken string, accessTokenRest ...string) GithubAuthQuerySet {
	iArgs := []interface{}{accessToken}
	for _, arg := range accessTokenRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("access_token NOT IN (?)", iArgs))
}

// All is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) All(ret *[]GithubAuth) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// Create is an autogenerated method
// nolint: dupl
func (o *GithubAuth) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) CreatedAtEq(createdAt time.Time) GithubAuthQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) CreatedAtGt(createdAt time.Time) GithubAuthQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) CreatedAtGte(createdAt time.Time) GithubAuthQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) CreatedAtLt(createdAt time.Time) GithubAuthQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) CreatedAtLte(createdAt time.Time) GithubAuthQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) CreatedAtNe(createdAt time.Time) GithubAuthQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// Delete is an autogenerated method
// nolint: dupl
func (o *GithubAuth) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) Delete() error {
	return qs.db.Delete(GithubAuth{}).Error
}

// DeletedAtEq is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) DeletedAtEq(deletedAt time.Time) GithubAuthQuerySet {
	return qs.w(qs.db.Where("deleted_at = ?", deletedAt))
}

// DeletedAtGt is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) DeletedAtGt(deletedAt time.Time) GithubAuthQuerySet {
	return qs.w(qs.db.Where("deleted_at > ?", deletedAt))
}

// DeletedAtGte is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) DeletedAtGte(deletedAt time.Time) GithubAuthQuerySet {
	return qs.w(qs.db.Where("deleted_at >= ?", deletedAt))
}

// DeletedAtIsNotNull is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) DeletedAtIsNotNull() GithubAuthQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NOT NULL"))
}

// DeletedAtIsNull is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) DeletedAtIsNull() GithubAuthQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NULL"))
}

// DeletedAtLt is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) DeletedAtLt(deletedAt time.Time) GithubAuthQuerySet {
	return qs.w(qs.db.Where("deleted_at < ?", deletedAt))
}

// DeletedAtLte is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) DeletedAtLte(deletedAt time.Time) GithubAuthQuerySet {
	return qs.w(qs.db.Where("deleted_at <= ?", deletedAt))
}

// DeletedAtNe is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) DeletedAtNe(deletedAt time.Time) GithubAuthQuerySet {
	return qs.w(qs.db.Where("deleted_at != ?", deletedAt))
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) GetUpdater() GithubAuthUpdater {
	return NewGithubAuthUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) IDEq(ID uint) GithubAuthQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) IDGt(ID uint) GithubAuthQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) IDGte(ID uint) GithubAuthQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) IDIn(ID uint, IDRest ...uint) GithubAuthQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id IN (?)", iArgs))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) IDLt(ID uint) GithubAuthQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) IDLte(ID uint) GithubAuthQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) IDNe(ID uint) GithubAuthQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) IDNotIn(ID uint, IDRest ...uint) GithubAuthQuerySet {
	iArgs := []interface{}{ID}
	for _, arg := range IDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", iArgs))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) Limit(limit int) GithubAuthQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// LoginEq is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) LoginEq(login string) GithubAuthQuerySet {
	return qs.w(qs.db.Where("login = ?", login))
}

// LoginIn is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) LoginIn(login string, loginRest ...string) GithubAuthQuerySet {
	iArgs := []interface{}{login}
	for _, arg := range loginRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("login IN (?)", iArgs))
}

// LoginNe is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) LoginNe(login string) GithubAuthQuerySet {
	return qs.w(qs.db.Where("login != ?", login))
}

// LoginNotIn is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) LoginNotIn(login string, loginRest ...string) GithubAuthQuerySet {
	iArgs := []interface{}{login}
	for _, arg := range loginRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("login NOT IN (?)", iArgs))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs GithubAuthQuerySet) One(ret *GithubAuth) error {
	return qs.db.First(ret).Error
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) OrderAscByCreatedAt() GithubAuthQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByDeletedAt is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) OrderAscByDeletedAt() GithubAuthQuerySet {
	return qs.w(qs.db.Order("deleted_at ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) OrderAscByID() GithubAuthQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) OrderAscByUpdatedAt() GithubAuthQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderAscByUserID is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) OrderAscByUserID() GithubAuthQuerySet {
	return qs.w(qs.db.Order("user_id ASC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) OrderDescByCreatedAt() GithubAuthQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByDeletedAt is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) OrderDescByDeletedAt() GithubAuthQuerySet {
	return qs.w(qs.db.Order("deleted_at DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) OrderDescByID() GithubAuthQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) OrderDescByUpdatedAt() GithubAuthQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// OrderDescByUserID is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) OrderDescByUserID() GithubAuthQuerySet {
	return qs.w(qs.db.Order("user_id DESC"))
}

// PrivateAccessTokenEq is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) PrivateAccessTokenEq(privateAccessToken string) GithubAuthQuerySet {
	return qs.w(qs.db.Where("private_access_token = ?", privateAccessToken))
}

// PrivateAccessTokenIn is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) PrivateAccessTokenIn(privateAccessToken string, privateAccessTokenRest ...string) GithubAuthQuerySet {
	iArgs := []interface{}{privateAccessToken}
	for _, arg := range privateAccessTokenRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("private_access_token IN (?)", iArgs))
}

// PrivateAccessTokenNe is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) PrivateAccessTokenNe(privateAccessToken string) GithubAuthQuerySet {
	return qs.w(qs.db.Where("private_access_token != ?", privateAccessToken))
}

// PrivateAccessTokenNotIn is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) PrivateAccessTokenNotIn(privateAccessToken string, privateAccessTokenRest ...string) GithubAuthQuerySet {
	iArgs := []interface{}{privateAccessToken}
	for _, arg := range privateAccessTokenRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("private_access_token NOT IN (?)", iArgs))
}

// SetAccessToken is an autogenerated method
// nolint: dupl
func (u GithubAuthUpdater) SetAccessToken(accessToken string) GithubAuthUpdater {
	u.fields[string(GithubAuthDBSchema.AccessToken)] = accessToken
	return u
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u GithubAuthUpdater) SetCreatedAt(createdAt time.Time) GithubAuthUpdater {
	u.fields[string(GithubAuthDBSchema.CreatedAt)] = createdAt
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u GithubAuthUpdater) SetID(ID uint) GithubAuthUpdater {
	u.fields[string(GithubAuthDBSchema.ID)] = ID
	return u
}

// SetLogin is an autogenerated method
// nolint: dupl
func (u GithubAuthUpdater) SetLogin(login string) GithubAuthUpdater {
	u.fields[string(GithubAuthDBSchema.Login)] = login
	return u
}

// SetPrivateAccessToken is an autogenerated method
// nolint: dupl
func (u GithubAuthUpdater) SetPrivateAccessToken(privateAccessToken string) GithubAuthUpdater {
	u.fields[string(GithubAuthDBSchema.PrivateAccessToken)] = privateAccessToken
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u GithubAuthUpdater) SetUpdatedAt(updatedAt time.Time) GithubAuthUpdater {
	u.fields[string(GithubAuthDBSchema.UpdatedAt)] = updatedAt
	return u
}

// SetUserID is an autogenerated method
// nolint: dupl
func (u GithubAuthUpdater) SetUserID(userID uint) GithubAuthUpdater {
	u.fields[string(GithubAuthDBSchema.UserID)] = userID
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u GithubAuthUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) UpdatedAtEq(updatedAt time.Time) GithubAuthQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) UpdatedAtGt(updatedAt time.Time) GithubAuthQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) UpdatedAtGte(updatedAt time.Time) GithubAuthQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) UpdatedAtLt(updatedAt time.Time) GithubAuthQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) UpdatedAtLte(updatedAt time.Time) GithubAuthQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) UpdatedAtNe(updatedAt time.Time) GithubAuthQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// UserIDEq is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) UserIDEq(userID uint) GithubAuthQuerySet {
	return qs.w(qs.db.Where("user_id = ?", userID))
}

// UserIDGt is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) UserIDGt(userID uint) GithubAuthQuerySet {
	return qs.w(qs.db.Where("user_id > ?", userID))
}

// UserIDGte is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) UserIDGte(userID uint) GithubAuthQuerySet {
	return qs.w(qs.db.Where("user_id >= ?", userID))
}

// UserIDIn is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) UserIDIn(userID uint, userIDRest ...uint) GithubAuthQuerySet {
	iArgs := []interface{}{userID}
	for _, arg := range userIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("user_id IN (?)", iArgs))
}

// UserIDLt is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) UserIDLt(userID uint) GithubAuthQuerySet {
	return qs.w(qs.db.Where("user_id < ?", userID))
}

// UserIDLte is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) UserIDLte(userID uint) GithubAuthQuerySet {
	return qs.w(qs.db.Where("user_id <= ?", userID))
}

// UserIDNe is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) UserIDNe(userID uint) GithubAuthQuerySet {
	return qs.w(qs.db.Where("user_id != ?", userID))
}

// UserIDNotIn is an autogenerated method
// nolint: dupl
func (qs GithubAuthQuerySet) UserIDNotIn(userID uint, userIDRest ...uint) GithubAuthQuerySet {
	iArgs := []interface{}{userID}
	for _, arg := range userIDRest {
		iArgs = append(iArgs, arg)
	}
	return qs.w(qs.db.Where("user_id NOT IN (?)", iArgs))
}

// ===== END of query set GithubAuthQuerySet

// ===== BEGIN of GithubAuth modifiers

type githubAuthDBSchemaField string

// GithubAuthDBSchema stores db field names of GithubAuth
var GithubAuthDBSchema = struct {
	ID                 githubAuthDBSchemaField
	CreatedAt          githubAuthDBSchemaField
	UpdatedAt          githubAuthDBSchemaField
	DeletedAt          githubAuthDBSchemaField
	AccessToken        githubAuthDBSchemaField
	PrivateAccessToken githubAuthDBSchemaField
	RawData            githubAuthDBSchemaField
	UserID             githubAuthDBSchemaField
	Login              githubAuthDBSchemaField
}{

	ID:                 githubAuthDBSchemaField("id"),
	CreatedAt:          githubAuthDBSchemaField("created_at"),
	UpdatedAt:          githubAuthDBSchemaField("updated_at"),
	DeletedAt:          githubAuthDBSchemaField("deleted_at"),
	AccessToken:        githubAuthDBSchemaField("access_token"),
	PrivateAccessToken: githubAuthDBSchemaField("private_access_token"),
	RawData:            githubAuthDBSchemaField("raw_data"),
	UserID:             githubAuthDBSchemaField("user_id"),
	Login:              githubAuthDBSchemaField("login"),
}

// Update updates GithubAuth fields by primary key
func (o *GithubAuth) Update(db *gorm.DB, fields ...githubAuthDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":                   o.ID,
		"created_at":           o.CreatedAt,
		"updated_at":           o.UpdatedAt,
		"deleted_at":           o.DeletedAt,
		"access_token":         o.AccessToken,
		"private_access_token": o.PrivateAccessToken,
		"raw_data":             o.RawData,
		"user_id":              o.UserID,
		"login":                o.Login,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := string(f)
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update GithubAuth %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// GithubAuthUpdater is an GithubAuth updates manager
type GithubAuthUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewGithubAuthUpdater creates new GithubAuth updater
func NewGithubAuthUpdater(db *gorm.DB) GithubAuthUpdater {
	return GithubAuthUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&GithubAuth{}),
	}
}

// ===== END of GithubAuth modifiers

// ===== END of all query sets
